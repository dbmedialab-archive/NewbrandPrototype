{"version":3,"file":"static/webpack/static/development/pages/elbil.js.5fde7921b5c265a57b6b.hot-update.js","sources":["webpack:///./pages/elbil.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Navbar from \"../Components/Navbar\";\nimport DetailHeader from \"../Components/DetailHeader\";\nimport ArticleCard from \"../Components/ArticleCard\";\nimport styled from '@emotion/styled';\n\nimport artikler from '../artikler.json';\n\nimport { useQuery } from '@apollo/react-hooks'\nimport gql from 'graphql-tag'\nimport { withApollo } from \"../lib/apollo\"\n\nconst DetailWrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    padding: 1rem;\n    margin: 0;\n\n    @media (min-width: 800px) {\n      max-width: 680px;\n      flex-direction: column;\n      align-align: center;\n      justify-content: center;\n      flex-wrap: wrap;\n    }\n\n  }\n  `\n\nconst Detail = styled.div`\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    align-self: center;  \n    background: #1d1d1d;\n    color: #fff;\n    padding: .5rem;\n    margin: 0;\n\n  p{\n    margin: 0;\n    line-height: 1.4rem;\n\n  }\n\n  h1, h2, h3, h4{\n    margin-bottom: .3rem;\n  }\n\n  h4{\n    font-size: 1.1rem;\n    font-weight: bold;\n    margin-bottom: 0.8rem;\n  }\n`\n\nconst ALL_POSTS_QUERY = gql`\nquery MyBodyText($id: Int) {\n  labrador {\n    article(id: $id) {\n      title\n      subtitle\n      publishedURL\n      sectionTag\n      tags\n      siteDomain\n      imageId\n      bodytextStructured {\n\n        ... on Labrador_HTMLElement {\n          name\n          attributes {\n            key\n            value\n          }\n          children {\n\n            ... on Labrador_HTMLElement {\n              name\n              attributes {\n                key\n                value\n              }\n              children {\n\n                ... on Labrador_HTMLElement {\n                  name\n                  attributes {\n                    key\n                    value\n                  }\n                  children {\n    \n                    ... on Labrador_HTMLElement {\n                      name\n                      attributes {\n                        key\n                        value\n                      }\n                      children {\n      \n                        ... on Labrador_HTMLElement {\n                          name\n                          attributes {\n                            key\n                            value\n                          }\n                     \n                        }\n                        ... on Labrador_Text {\n                          text\n                        }\n                      }\n                    }\n                    ... on Labrador_Text {\n                      text\n                    }\n                  }\n                }\n                ... on Labrador_Text {\n                  text\n                }\n              }\n            }\n            ... on Labrador_Text {\n              text\n            }\n          }\n        }\n      }\n    }\n  }\n}\n`\n\n// Getinng props from query\nElbilDetail.getInitialProps = async ({req, query}) =>{\n  let elbilId = Number(query.id)\n  return {elbilId};\n}\n\n// Getting the text from bodytextStrutured\n  const traverseElements = (elements = []) => {\n    if (!elements) {\n        return null\n    }\n  \n    return elements.map((el, i) => {\n      if (el[\"__typename\"] === \"Labrador_Text\") {\n          return el.text\n      } else {\n          switch (el.name) {\n              default:\n                return (\n                  <el.name>\n                    {traverseElements(el.children)}\n                  </el.name>\n                )\n          }\n      }\n    })\n  }\n  \n\nfunction ElbilDetail({elbilId}) {\n  // Getting article id of tester\n  const articleID = elbiler[elbilId].tester\n\n  const { loading, error, data, fetchMore, networkStatus } = useQuery(\n    ALL_POSTS_QUERY,\n    {\n      notifyOnNetworkStatusChange: true,\n      variables: { id: articleID }\n    }\n  )\n  \n  // Stopping if error\n  if (error) {\n    console.log(\"Error while fetching data\")\n    return null\n  } \n\n  // Using State Hook\n  const [articleTitle, setTitle] = useState(\"Tittel\");\n  const [articleSubtitle, setSubtitle] = useState(\"undertittel\");\n  const [articleImage, setImage] = useState(undefined);\n  const [brand, setBrand] = useState(\"brandnavn\")\n  \n  useEffect(() => {\n    // Update the document title using the browser API\n    if (data.labrador === undefined) {\n      const waitMessage = \"Loading\"\n      setTitle(waitMessage), setSubtitle(waitMessage), setImage(waitMessage)\n    } else {\n      const articleTitle = data.labrador.article.title\n      const subTitle = data.labrador.article.subtitle\n      const imageId = data.labrador.article.imageId\n      const image = \"https://www.dagbladet.no/images/\" + imageId + \".jpg?imageId=\" + imageId + \"&width=400&height=auto\"\n      console.log(image)\n      const brand = data.labrador.article.siteDomain\n\n      setTitle(articleTitle)\n      setSubtitle(subTitle)\n      setImage(image)\n      setBrand(brand)\n    }\n\n  }, [data.labrador] );\n\n  // Filtering out the car that matches the elbilId to an Array with that ID\n  const singleElbil = elbiler.filter (elbil => elbil.id === elbilId)  \n  console.log(singleElbil)\n  const header =  \n      <DetailHeader\n        merke={singleElbil[0].modell} \n        modell={singleElbil[0].merke}  \n        type={singleElbil[0].type}\n        rekkevidde={singleElbil[0].rekkevidde} \n        pris={singleElbil[0].pris} \n        bildeURL={singleElbil[0].bildeURL}\n        id={singleElbil[0].id}\n      />\n      \n    return (\n      <div>\n      {header}\n      <DetailWrapper>\n        <Navbar />\n        <Detail>\n        <p>Fusce ornare interdum lectus, sodales placerat dolor semper sed. Curabitur lacinia nibh sit amet iaculis ultricies. Ut vel ante vel ligula sagittis finibus in ac leo. Nulla ante dolor, sagittis luctus efficitur a, mollis vitae tellus. Donec blandit lobortis urna sed facilisis. Vivamus consectetur risus at tortor viverra vulputate.</p>\n          <h2>Saker om {singleElbil[0].merke} {singleElbil[0].modell}:</h2>\n\n            <ArticleCard title={articleTitle} \n                          subtitle={articleSubtitle} \n                          bildeURL={articleImage}\n                          brand={brand}\n            \n            />   \n        </Detail>           \n\n\n      </DetailWrapper>\n      </div>\n    )\n}\n\nexport default withApollo(ElbilDetail);\n\n\n\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAkBA;AA2BA;AACA;AA+EA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAEA;AAAA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AACA;AAIA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAHA;AAQA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AAHA;AAOA;AACA;AAAA;AAAA;AAFA;AANA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAWA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AACA;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAPA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AASA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AACA;AACA;AACA;AAHA;AAAA;AAAA;AAAA;AAAA;AAAA;AAYA;AACA;AACA;;;;A","sourceRoot":""}