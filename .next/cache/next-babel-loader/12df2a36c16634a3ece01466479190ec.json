{"ast":null,"code":"import _objectSpread from \"@babel/runtime-corejs2/helpers/esm/objectSpread\";\nimport _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime-corejs2/helpers/esm/objectWithoutProperties\";\nvar _jsxFileName = \"/Users/mariusgrondahl/Documents/GitHub/NewbrandPrototype/lib/apollo.js\";\nvar __jsx = React.createElement;\nimport React, { useMemo } from 'react';\nimport Head from 'next/head';\nimport { ApolloProvider } from '@apollo/react-hooks';\nimport { ApolloClient } from 'apollo-client';\nimport { InMemoryCache, IntrospectionFragmentMatcher } from 'apollo-cache-inmemory';\nimport introspectionData from '../fragmentTypes.json';\nimport { HttpLink } from 'apollo-link-http';\nimport fetch from 'isomorphic-unfetch';\nlet apolloClient = null;\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\n\nexport function withApollo(PageComponent, {\n  ssr = true\n} = {}) {\n  const WithApollo = (_ref) => {\n    let {\n      apolloClient,\n      apolloState\n    } = _ref,\n        pageProps = _objectWithoutProperties(_ref, [\"apolloClient\", \"apolloState\"]);\n\n    const client = useMemo(() => apolloClient || initApolloClient(apolloState), []);\n    return __jsx(ApolloProvider, {\n      client: client,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 26\n      },\n      __self: this\n    }, __jsx(PageComponent, _extends({}, pageProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 27\n      },\n      __self: this\n    })));\n  }; // Set the correct displayName in development\n\n\n  if (process.env.NODE_ENV !== 'production') {\n    const displayName = PageComponent.displayName || PageComponent.name || 'Component';\n\n    if (displayName === 'App') {\n      console.warn('This withApollo HOC only works with PageComponents.');\n    }\n\n    WithApollo.displayName = `withApollo(${displayName})`;\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      const {\n        AppTree\n      } = ctx; // Initialize ApolloClient, add it to the ctx object so\n      // we can use it in `PageComponent.getInitialProp`.\n\n      const apolloClient = ctx.apolloClient = initApolloClient(); // Run wrapped getInitialProps methods\n\n      let pageProps = {};\n\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx);\n      } // Only on the server:\n\n\n      if (true) {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (ctx.res && ctx.res.finished) {\n          return pageProps;\n        } // Only if ssr is enabled\n\n\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const {\n              getDataFromTree\n            } = await import('@apollo/react-ssr');\n            await getDataFromTree(__jsx(AppTree, {\n              pageProps: _objectSpread({}, pageProps, {\n                apolloClient\n              }),\n              __source: {\n                fileName: _jsxFileName,\n                lineNumber: 72\n              },\n              __self: this\n            }));\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error('Error while running `getDataFromTree`', error);\n          } // getDataFromTree does not call componentWillUnmount\n          // head side effect therefore need to be cleared manually\n\n\n          Head.rewind();\n        }\n      } // Extract query data from the Apollo store\n\n\n      const apolloState = apolloClient.cache.extract();\n      return _objectSpread({}, pageProps, {\n        apolloState\n      });\n    };\n  }\n\n  return WithApollo;\n}\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {Object} initialState\n */\n\nfunction initApolloClient(initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (true) {\n    return createApolloClient(initialState);\n  } // Reuse client on the client-side\n\n\n  if (!apolloClient) {\n    apolloClient = createApolloClient(initialState);\n  }\n\n  return apolloClient;\n}\n\nconst fragmentMatcher = new IntrospectionFragmentMatcher({\n  introspectionQueryResultData: introspectionData\n});\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n */\n\nfunction createApolloClient(initialState = {}) {\n  const apolloCache = new InMemoryCache({\n    fragmentMatcher\n  }).restore(initialState); // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n\n  return new ApolloClient({\n    ssrMode: true,\n    // Disables forceFetch on the server (so queries are only run once)\n    link: new HttpLink({\n      uri: 'http://wolverine-fetcher.prod.medialaben.no/query',\n      // Server URL (must be absolute)\n      credentials: 'same-origin',\n      // Additional fetch() options like `credentials` or `headers`\n      fetch\n    }),\n    cache: apolloCache\n  });\n}","map":{"version":3,"sources":["/Users/mariusgrondahl/Documents/GitHub/NewbrandPrototype/lib/apollo.js"],"names":["React","useMemo","Head","ApolloProvider","ApolloClient","InMemoryCache","IntrospectionFragmentMatcher","introspectionData","HttpLink","fetch","apolloClient","withApollo","PageComponent","ssr","WithApollo","apolloState","pageProps","client","initApolloClient","process","env","NODE_ENV","displayName","name","console","warn","getInitialProps","ctx","AppTree","res","finished","getDataFromTree","error","rewind","cache","extract","initialState","createApolloClient","fragmentMatcher","introspectionQueryResultData","apolloCache","restore","ssrMode","link","uri","credentials"],"mappings":"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","sourcesContent":["import React, { useMemo } from 'react'\nimport Head from 'next/head'\nimport { ApolloProvider } from '@apollo/react-hooks'\nimport { ApolloClient } from 'apollo-client'\nimport { InMemoryCache, IntrospectionFragmentMatcher } from 'apollo-cache-inmemory'\nimport introspectionData from '../fragmentTypes.json'\nimport { HttpLink } from 'apollo-link-http'\nimport fetch from 'isomorphic-unfetch'\n\nlet apolloClient = null\n/**\n * Creates and provides the apolloContext\n * to a next.js PageTree. Use it by wrapping\n * your PageComponent via HOC pattern.\n * @param {Function|Class} PageComponent\n * @param {Object} [config]\n * @param {Boolean} [config.ssr=true]\n */\nexport function withApollo (PageComponent, { ssr = true } = {}) {\n  const WithApollo = ({ apolloClient, apolloState, ...pageProps }) => {\n    const client = useMemo(\n      () => apolloClient || initApolloClient(apolloState),\n      []\n    )\n    return (\n      <ApolloProvider client={client}>\n        <PageComponent {...pageProps} />\n      </ApolloProvider>\n    )\n  }\n\n  // Set the correct displayName in development\n  if (process.env.NODE_ENV !== 'production') {\n    const displayName =\n      PageComponent.displayName || PageComponent.name || 'Component'\n\n    if (displayName === 'App') {\n      console.warn('This withApollo HOC only works with PageComponents.')\n    }\n\n    WithApollo.displayName = `withApollo(${displayName})`\n  }\n\n  if (ssr || PageComponent.getInitialProps) {\n    WithApollo.getInitialProps = async ctx => {\n      const { AppTree } = ctx\n\n      // Initialize ApolloClient, add it to the ctx object so\n      // we can use it in `PageComponent.getInitialProp`.\n      const apolloClient = (ctx.apolloClient = initApolloClient())\n\n      // Run wrapped getInitialProps methods\n      let pageProps = {}\n      if (PageComponent.getInitialProps) {\n        pageProps = await PageComponent.getInitialProps(ctx)\n      }\n\n      // Only on the server:\n      if (typeof window === 'undefined') {\n        // When redirecting, the response is finished.\n        // No point in continuing to render\n        if (ctx.res && ctx.res.finished) {\n          return pageProps\n        }\n\n        // Only if ssr is enabled\n        if (ssr) {\n          try {\n            // Run all GraphQL queries\n            const { getDataFromTree } = await import('@apollo/react-ssr')\n            await getDataFromTree(\n              <AppTree\n                pageProps={{\n                  ...pageProps,\n                  apolloClient\n                }}\n              />\n            )\n          } catch (error) {\n            // Prevent Apollo Client GraphQL errors from crashing SSR.\n            // Handle them in components via the data.error prop:\n            // https://www.apollographql.com/docs/react/api/react-apollo.html#graphql-query-data-error\n            console.error('Error while running `getDataFromTree`', error)\n          }\n\n          // getDataFromTree does not call componentWillUnmount\n          // head side effect therefore need to be cleared manually\n          Head.rewind()\n        }\n      }\n\n      // Extract query data from the Apollo store\n      const apolloState = apolloClient.cache.extract()\n\n      return {\n        ...pageProps,\n        apolloState\n      }\n    }\n  }\n\n  return WithApollo\n}\n\n/**\n * Always creates a new apollo client on the server\n * Creates or reuses apollo client in the browser.\n * @param  {Object} initialState\n */\nfunction initApolloClient (initialState) {\n  // Make sure to create a new client for every server-side request so that data\n  // isn't shared between connections (which would be bad)\n  if (typeof window === 'undefined') {\n    return createApolloClient(initialState)\n  }\n\n  // Reuse client on the client-side\n  if (!apolloClient) {\n    apolloClient = createApolloClient(initialState)\n  }\n\n  return apolloClient\n}\n\nconst fragmentMatcher = new IntrospectionFragmentMatcher({introspectionQueryResultData: introspectionData}) \n\n/**\n * Creates and configures the ApolloClient\n * @param  {Object} [initialState={}]\n */\nfunction createApolloClient (initialState = {}) {\n  const apolloCache = new InMemoryCache({fragmentMatcher}).restore(initialState);\n  // Check out https://github.com/zeit/next.js/pull/4611 if you want to use the AWSAppSyncClient\n  return new ApolloClient({\n    ssrMode: typeof window === 'undefined', // Disables forceFetch on the server (so queries are only run once)\n    link: new HttpLink({\n      uri: 'http://wolverine-fetcher.prod.medialaben.no/query', // Server URL (must be absolute)\n      credentials: 'same-origin', // Additional fetch() options like `credentials` or `headers`\n      fetch\n    }),\n    cache: apolloCache\n  })\n}"]},"metadata":{},"sourceType":"module"}