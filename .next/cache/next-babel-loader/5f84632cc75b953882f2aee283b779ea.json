{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime-corejs2/regenerator\";\nimport _asyncToGenerator from \"@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _taggedTemplateLiteral from \"@babel/runtime-corejs2/helpers/esm/taggedTemplateLiteral\";\nvar _jsxFileName = \"/Users/mariusgrondahl/Documents/GitHub/NewbrandPrototype/pages/elbil.js\";\nvar __jsx = React.createElement;\n\nfunction _templateObject3() {\n  var data = _taggedTemplateLiteral([\"\\nquery MyBodyText($id: Int) {\\n  labrador {\\n    article(id: $id) {\\n      title\\n      subtitle\\n      publishedURL\\n      sectionTag\\n      tags\\n      siteDomain\\n      imageId\\n      bodytextStructured {\\n\\n        ... on Labrador_HTMLElement {\\n          name\\n          attributes {\\n            key\\n            value\\n          }\\n          children {\\n\\n            ... on Labrador_HTMLElement {\\n              name\\n              attributes {\\n                key\\n                value\\n              }\\n              children {\\n\\n                ... on Labrador_HTMLElement {\\n                  name\\n                  attributes {\\n                    key\\n                    value\\n                  }\\n                  children {\\n    \\n                    ... on Labrador_HTMLElement {\\n                      name\\n                      attributes {\\n                        key\\n                        value\\n                      }\\n                      children {\\n      \\n                        ... on Labrador_HTMLElement {\\n                          name\\n                          attributes {\\n                            key\\n                            value\\n                          }\\n                     \\n                        }\\n                        ... on Labrador_Text {\\n                          text\\n                        }\\n                      }\\n                    }\\n                    ... on Labrador_Text {\\n                      text\\n                    }\\n                  }\\n                }\\n                ... on Labrador_Text {\\n                  text\\n                }\\n              }\\n            }\\n            ... on Labrador_Text {\\n              text\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\\n\"]);\n\n  _templateObject3 = function _templateObject3() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject2() {\n  var data = _taggedTemplateLiteral([\"\\n    width: 100%;\\n    display: flex;\\n    flex-direction: column;\\n    align-self: center;  \\n    background: #1d1d1d;\\n    color: #fff;\\n    padding: .5rem;\\n    margin: 0;\\n\\n  p{\\n    margin: 0;\\n    line-height: 1.4rem;\\n\\n  }\\n\\n  h1, h2, h3, h4{\\n    margin-bottom: .3rem;\\n  }\\n\\n  h4{\\n    font-size: 1.1rem;\\n    font-weight: bold;\\n    margin-bottom: 0.8rem;\\n  }\\n\"]);\n\n  _templateObject2 = function _templateObject2() {\n    return data;\n  };\n\n  return data;\n}\n\nfunction _templateObject() {\n  var data = _taggedTemplateLiteral([\"\\n    display: flex;\\n    flex-direction: column;\\n    justify-content: center;\\n    padding: 1rem;\\n    margin: 0;\\n\\n    @media (min-width: 800px) {\\n      max-width: 680px;\\n      flex-direction: column;\\n      align-align: center;\\n      justify-content: center;\\n      flex-wrap: wrap;\\n    }\\n\\n  }\\n  \"]);\n\n  _templateObject = function _templateObject() {\n    return data;\n  };\n\n  return data;\n}\n\nimport React, { useState, useEffect } from 'react';\nimport Navbar from \"../Components/Navbar\";\nimport DetailHeader from \"../Components/DetailHeader\";\nimport ArticleCard from \"../Components/ArticleCard\";\nimport styled from '@emotion/styled';\nimport artikler from '../elbiler.json';\nimport { useQuery } from '@apollo/react-hooks';\nimport gql from 'graphql-tag';\nimport { withApollo } from \"../lib/apollo\";\nvar DetailWrapper = styled.div(_templateObject());\nvar Detail = styled.div(_templateObject2());\nvar ALL_POSTS_QUERY = gql(_templateObject3()); // Getinng props from query\n\nElbilDetail.getInitialProps =\n/*#__PURE__*/\nfunction () {\n  var _ref2 = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(_ref) {\n    var req, query, elbilId;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            req = _ref.req, query = _ref.query;\n            elbilId = Number(query.id);\n            return _context.abrupt(\"return\", {\n              elbilId: elbilId\n            });\n\n          case 3:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee);\n  }));\n\n  return function (_x) {\n    return _ref2.apply(this, arguments);\n  };\n}(); // Getting the text from bodytextStrutured\n\n\nvar traverseElements = function traverseElements() {\n  var elements = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];\n\n  if (!elements) {\n    return null;\n  }\n\n  return elements.map(function (el, i) {\n    if (el[\"__typename\"] === \"Labrador_Text\") {\n      return el.text;\n    } else {\n      switch (el.name) {\n        default:\n          return __jsx(el.name, {\n            __source: {\n              fileName: _jsxFileName,\n              lineNumber: 156\n            },\n            __self: this\n          }, traverseElements(el.children));\n      }\n    }\n  });\n};\n\nfunction ElbilDetail(_ref3) {\n  var elbilId = _ref3.elbilId;\n  // Getting article id of tester\n  var articleID = elbiler[elbilId].tester;\n\n  var _useQuery = useQuery(ALL_POSTS_QUERY, {\n    notifyOnNetworkStatusChange: true,\n    variables: {\n      id: articleID\n    }\n  }),\n      loading = _useQuery.loading,\n      error = _useQuery.error,\n      data = _useQuery.data,\n      fetchMore = _useQuery.fetchMore,\n      networkStatus = _useQuery.networkStatus; // Stopping if error\n\n\n  if (error) {\n    console.log(\"Error while fetching data\");\n    return null;\n  } // Using State Hook\n\n\n  var _useState = useState(\"Tittel\"),\n      articleTitle = _useState[0],\n      setTitle = _useState[1];\n\n  var _useState2 = useState(\"undertittel\"),\n      articleSubtitle = _useState2[0],\n      setSubtitle = _useState2[1];\n\n  var _useState3 = useState(undefined),\n      articleImage = _useState3[0],\n      setImage = _useState3[1];\n\n  var _useState4 = useState(\"brandnavn\"),\n      brand = _useState4[0],\n      setBrand = _useState4[1];\n\n  useEffect(function () {\n    // Update the document title using the browser API\n    if (data.labrador === undefined) {\n      var waitMessage = \"Loading\";\n      setTitle(waitMessage), setSubtitle(waitMessage), setImage(waitMessage);\n    } else {\n      var _articleTitle = data.labrador.article.title;\n      var subTitle = data.labrador.article.subtitle;\n      var imageId = data.labrador.article.imageId;\n      var image = \"https://www.dagbladet.no/images/\" + imageId + \".jpg?imageId=\" + imageId + \"&width=400&height=auto\";\n      console.log(image);\n      var _brand = data.labrador.article.siteDomain;\n      setTitle(_articleTitle);\n      setSubtitle(subTitle);\n      setImage(image);\n      setBrand(_brand);\n    }\n  }, [data.labrador]); // Filtering out the car that matches the elbilId to an Array with that ID\n\n  var singleElbil = elbiler.filter(function (elbil) {\n    return elbil.id === elbilId;\n  });\n  console.log(singleElbil);\n\n  var header = __jsx(DetailHeader, {\n    merke: singleElbil[0].modell,\n    modell: singleElbil[0].merke,\n    type: singleElbil[0].type,\n    rekkevidde: singleElbil[0].rekkevidde,\n    pris: singleElbil[0].pris,\n    bildeURL: singleElbil[0].bildeURL,\n    id: singleElbil[0].id,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 215\n    },\n    __self: this\n  });\n\n  return __jsx(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226\n    },\n    __self: this\n  }, header, __jsx(DetailWrapper, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228\n    },\n    __self: this\n  }, __jsx(Navbar, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 229\n    },\n    __self: this\n  }), __jsx(Detail, {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 230\n    },\n    __self: this\n  }, __jsx(\"p\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 231\n    },\n    __self: this\n  }, \"Fusce ornare interdum lectus, sodales placerat dolor semper sed. Curabitur lacinia nibh sit amet iaculis ultricies. Ut vel ante vel ligula sagittis finibus in ac leo. Nulla ante dolor, sagittis luctus efficitur a, mollis vitae tellus. Donec blandit lobortis urna sed facilisis. Vivamus consectetur risus at tortor viverra vulputate.\"), __jsx(\"h2\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232\n    },\n    __self: this\n  }, \"Saker om \", singleElbil[0].merke, \" \", singleElbil[0].modell, \":\"), __jsx(ArticleCard, {\n    title: articleTitle,\n    subtitle: articleSubtitle,\n    bildeURL: articleImage,\n    brand: brand,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234\n    },\n    __self: this\n  }))));\n}\n\nexport default withApollo(ElbilDetail);","map":{"version":3,"sources":["/Users/mariusgrondahl/Documents/GitHub/NewbrandPrototype/pages/elbil.js"],"names":["React","useState","useEffect","Navbar","DetailHeader","ArticleCard","styled","artikler","useQuery","gql","withApollo","DetailWrapper","div","Detail","ALL_POSTS_QUERY","ElbilDetail","getInitialProps","req","query","elbilId","Number","id","traverseElements","elements","map","el","i","text","name","children","articleID","elbiler","tester","notifyOnNetworkStatusChange","variables","loading","error","data","fetchMore","networkStatus","console","log","articleTitle","setTitle","articleSubtitle","setSubtitle","undefined","articleImage","setImage","brand","setBrand","labrador","waitMessage","article","title","subTitle","subtitle","imageId","image","siteDomain","singleElbil","filter","elbil","header","modell","merke","type","rekkevidde","pris","bildeURL"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from 'react';\nimport Navbar from \"../Components/Navbar\";\nimport DetailHeader from \"../Components/DetailHeader\";\nimport ArticleCard from \"../Components/ArticleCard\";\nimport styled from '@emotion/styled';\n\nimport artikler from '../elbiler.json';\n\nimport { useQuery } from '@apollo/react-hooks'\nimport gql from 'graphql-tag'\nimport { withApollo } from \"../lib/apollo\"\n\nconst DetailWrapper = styled.div`\n    display: flex;\n    flex-direction: column;\n    justify-content: center;\n    padding: 1rem;\n    margin: 0;\n\n    @media (min-width: 800px) {\n      max-width: 680px;\n      flex-direction: column;\n      align-align: center;\n      justify-content: center;\n      flex-wrap: wrap;\n    }\n\n  }\n  `\n\nconst Detail = styled.div`\n    width: 100%;\n    display: flex;\n    flex-direction: column;\n    align-self: center;  \n    background: #1d1d1d;\n    color: #fff;\n    padding: .5rem;\n    margin: 0;\n\n  p{\n    margin: 0;\n    line-height: 1.4rem;\n\n  }\n\n  h1, h2, h3, h4{\n    margin-bottom: .3rem;\n  }\n\n  h4{\n    font-size: 1.1rem;\n    font-weight: bold;\n    margin-bottom: 0.8rem;\n  }\n`\n\nconst ALL_POSTS_QUERY = gql`\nquery MyBodyText($id: Int) {\n  labrador {\n    article(id: $id) {\n      title\n      subtitle\n      publishedURL\n      sectionTag\n      tags\n      siteDomain\n      imageId\n      bodytextStructured {\n\n        ... on Labrador_HTMLElement {\n          name\n          attributes {\n            key\n            value\n          }\n          children {\n\n            ... on Labrador_HTMLElement {\n              name\n              attributes {\n                key\n                value\n              }\n              children {\n\n                ... on Labrador_HTMLElement {\n                  name\n                  attributes {\n                    key\n                    value\n                  }\n                  children {\n    \n                    ... on Labrador_HTMLElement {\n                      name\n                      attributes {\n                        key\n                        value\n                      }\n                      children {\n      \n                        ... on Labrador_HTMLElement {\n                          name\n                          attributes {\n                            key\n                            value\n                          }\n                     \n                        }\n                        ... on Labrador_Text {\n                          text\n                        }\n                      }\n                    }\n                    ... on Labrador_Text {\n                      text\n                    }\n                  }\n                }\n                ... on Labrador_Text {\n                  text\n                }\n              }\n            }\n            ... on Labrador_Text {\n              text\n            }\n          }\n        }\n      }\n    }\n  }\n}\n`\n\n// Getinng props from query\nElbilDetail.getInitialProps = async ({req, query}) =>{\n  let elbilId = Number(query.id)\n  return {elbilId};\n}\n\n// Getting the text from bodytextStrutured\n  const traverseElements = (elements = []) => {\n    if (!elements) {\n        return null\n    }\n  \n    return elements.map((el, i) => {\n      if (el[\"__typename\"] === \"Labrador_Text\") {\n          return el.text\n      } else {\n          switch (el.name) {\n              default:\n                return (\n                  <el.name>\n                    {traverseElements(el.children)}\n                  </el.name>\n                )\n          }\n      }\n    })\n  }\n  \n\nfunction ElbilDetail({elbilId}) {\n  // Getting article id of tester\n  const articleID = elbiler[elbilId].tester\n\n  const { loading, error, data, fetchMore, networkStatus } = useQuery(\n    ALL_POSTS_QUERY,\n    {\n      notifyOnNetworkStatusChange: true,\n      variables: { id: articleID }\n    }\n  )\n  \n  // Stopping if error\n  if (error) {\n    console.log(\"Error while fetching data\")\n    return null\n  } \n\n  // Using State Hook\n  const [articleTitle, setTitle] = useState(\"Tittel\");\n  const [articleSubtitle, setSubtitle] = useState(\"undertittel\");\n  const [articleImage, setImage] = useState(undefined);\n  const [brand, setBrand] = useState(\"brandnavn\")\n  \n  useEffect(() => {\n    // Update the document title using the browser API\n    if (data.labrador === undefined) {\n      const waitMessage = \"Loading\"\n      setTitle(waitMessage), setSubtitle(waitMessage), setImage(waitMessage)\n    } else {\n      const articleTitle = data.labrador.article.title\n      const subTitle = data.labrador.article.subtitle\n      const imageId = data.labrador.article.imageId\n      const image = \"https://www.dagbladet.no/images/\" + imageId + \".jpg?imageId=\" + imageId + \"&width=400&height=auto\"\n      console.log(image)\n      const brand = data.labrador.article.siteDomain\n\n      setTitle(articleTitle)\n      setSubtitle(subTitle)\n      setImage(image)\n      setBrand(brand)\n    }\n\n  }, [data.labrador] );\n\n  // Filtering out the car that matches the elbilId to an Array with that ID\n  const singleElbil = elbiler.filter (elbil => elbil.id === elbilId)  \n  console.log(singleElbil)\n  const header =  \n      <DetailHeader\n        merke={singleElbil[0].modell} \n        modell={singleElbil[0].merke}  \n        type={singleElbil[0].type}\n        rekkevidde={singleElbil[0].rekkevidde} \n        pris={singleElbil[0].pris} \n        bildeURL={singleElbil[0].bildeURL}\n        id={singleElbil[0].id}\n      />\n      \n    return (\n      <div>\n      {header}\n      <DetailWrapper>\n        <Navbar />\n        <Detail>\n        <p>Fusce ornare interdum lectus, sodales placerat dolor semper sed. Curabitur lacinia nibh sit amet iaculis ultricies. Ut vel ante vel ligula sagittis finibus in ac leo. Nulla ante dolor, sagittis luctus efficitur a, mollis vitae tellus. Donec blandit lobortis urna sed facilisis. Vivamus consectetur risus at tortor viverra vulputate.</p>\n          <h2>Saker om {singleElbil[0].merke} {singleElbil[0].modell}:</h2>\n\n            <ArticleCard title={articleTitle} \n                          subtitle={articleSubtitle} \n                          bildeURL={articleImage}\n                          brand={brand}\n            \n            />   \n        </Detail>           \n\n\n      </DetailWrapper>\n      </div>\n    )\n}\n\nexport default withApollo(ElbilDetail);\n\n\n\n"]},"metadata":{},"sourceType":"module"}