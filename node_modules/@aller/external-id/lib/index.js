"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = getExternalId;

var _url = _interopRequireDefault(require("url"));

var _getFallbackId = _interopRequireDefault(require("./helpers/get-fallback-id"));

var _getHost = _interopRequireDefault(require("./helpers/get-host"));

var _getPathId = _interopRequireDefault(require("./helpers/get-path-id"));

var _isValidUrl = _interopRequireDefault(require("./helpers/is-valid-url"));

var _getQueryId = _interopRequireDefault(require("./helpers/get-query-id"));

var _getHashId = _interopRequireDefault(require("./helpers/get-hash-id"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/**
 * Takes an URL and returns an ID.
 */
function getExternalId() {
  var url = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';

  if (url === '') {
    throw new Error('No URL provided');
  }

  var parsedUrl = _url["default"].parse(url, true);

  if (!(0, _isValidUrl["default"])(parsedUrl)) {
    throw new Error('Not a valid URL format for generating ID');
  }

  var hostname = parsedUrl.hostname,
      query = parsedUrl.query,
      pathname = parsedUrl.pathname,
      hash = parsedUrl.hash,
      protocol = parsedUrl.protocol;
  var host = (0, _getHost["default"])(hostname);
  var id; // Has query params, check for ID

  if (Object.keys(query).length !== 0) {
    id = (0, _getQueryId["default"])(host, query);
  } // Do another validity check without query params if we dont find queryId


  if (!id && !(0, _isValidUrl["default"])({
    hash: hash,
    hostname: hostname,
    path: pathname,
    pathname: pathname
  })) {
    throw new Error('Not a valid URL format for generating ID');
  } // Has hash, check for ID


  if (!id && hash) {
    id = (0, _getHashId["default"])(host, hash);
  } // Check for ID in path


  if (!id) {
    id = (0, _getPathId["default"])(host, pathname);
  } // Return the ID if we found one.


  if (id) {
    return id;
  } // Remove query params and hash if present.


  var cleanUrl = "".concat(protocol, "//").concat(hostname).concat(pathname); // Use fallback ID when no ID is present in URL

  return (0, _getFallbackId["default"])(host, cleanUrl);
}