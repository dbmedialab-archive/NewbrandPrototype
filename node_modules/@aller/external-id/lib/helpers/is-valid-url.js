"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = isValidUrl;

var _tlds = _interopRequireDefault(require("tlds"));

var _includes = _interopRequireDefault(require("./includes"));

var _startsWith = _interopRequireDefault(require("./starts-with"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/**
 * Ensures that the URL is valid (to us) for creating an ID.
 */
function isValidUrl() {
  var urlData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};

  // Not an object
  if (!isObject(urlData)) {
    return false;
  } // Empty object


  if (Object.keys(urlData).length === 0) {
    return false;
  }

  var hash = urlData.hash,
      hostname = urlData.hostname,
      path = urlData.path,
      pathname = urlData.pathname; // Not a valid host

  if (!isValidHost(hostname)) {
    return false;
  } // Some URLs starts this way:
  // https://www.godt.no/#!/artikkel/24359727/bocuse-d-or-europa-2018-norges-christian-andre-pettersen-tok-gull


  if (hash && (0, _startsWith["default"])(hash, '#!/artikkel')) {
    return true;
  } // Some URLs starts this way:
  // http://events.vglive.no/#event=2908


  if (hash && (0, _startsWith["default"])(hash, '#event=')) {
    return true;
  } // Not path present, we want articles not front pages


  if (path === '/' || pathname === '//') {
    return false;
  } // Valid URL


  return true;
}
/**
 * Inspects the hostname to validate the URL.
 */


function isValidHost(host) {
  if (!host) {
    return false;
  } // Starts with .


  if (host.charAt(0) === '.') {
    return false;
  } // Host is missing dot


  if (!(0, _includes["default"])(host, '.')) {
    return false;
  }

  var splittedHost = host.split('.');
  var tld = splittedHost[splittedHost.length - 1]; // Not a valid TLD

  if (!(0, _includes["default"])(_tlds["default"], tld)) {
    return false;
  } // Host is fine


  return true;
}
/**
 * Check if an object is a real object ({}) and not an array, function, new Number etc.
 */


function isObject(o) {
  return Object.prototype.toString.call(o) === '[object Object]';
}