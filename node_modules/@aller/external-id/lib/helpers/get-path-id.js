"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = getPathId;

var _regexp = require("./regexp");

var _includes = _interopRequireDefault(require("./includes"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance"); }

function _iterableToArrayLimit(arr, i) { var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

/**
 * Parses the URL path to find the external article ID.
 */
function getPathId(host, path) {
  // Clean the URL, split on space and look for potential candidates.
  var candidates = path.replace(_regexp.TRIM_EXTENSION, '').replace(_regexp.CLEAN_CHARS, ' ').split(' ').filter(function (pathPart) {
    return findCandidates(pathPart, path);
  }).reverse();
  var id; // Only one candidate, clean it.

  if (candidates.length === 1) {
    id = cleanId(candidates[0]);
  } // Multiple candidates, decide on one and clean it.


  if (candidates.length > 1) {
    var pickedId = pickId(candidates, path);
    id = cleanId(pickedId);
  } // Id found in path, create ID from it.


  if (id) {
    return "".concat(host, "/").concat(id);
  } // No ID found in path.


  return false;
}
/**
 * Check if every candidate looks like something that could be an ID.
 */


function findCandidates(pathPart, path) {
  // Round numbers are most likely not IDs. It can happen, but it's better to
  // generate a fallback ID in these cases rather than creating a incorrect ID.
  if (_regexp.IS_ROUND_NUMBER.test(pathPart)) {
    return false;
  } // Looks like a year (2000, ... , 2099), consider not a candidate.


  if (_regexp.IS_YEAR.test(pathPart)) {
    return false;
  } // Looks like a hash


  if (_regexp.IS_HASH_ID.test(pathPart)) {
    return true;
  } // Contains at least 5 numbers and possibly a dot and is in a position where it's likely to be an ID.


  if (_regexp.IS_NUMERIC_ID.test(pathPart) && isInIdPosition(pathPart, path)) {
    return true;
  } // Is combination ID from sites that use ../i/<combination_id>/..-format


  if (isCombinationId(pathPart, path, '/i/', 6)) {
    return true;
  } // Is combination ID from sites that use ../a/<combination_id>/..-format


  if (isCombinationId(pathPart, path, '/a/', 6)) {
    return true;
  } // Is combination ID from sites that use ../video/<combination_id>/..-format


  if (isCombinationId(pathPart, path, '/video/', 11)) {
    return true;
  }

  if ((0, _includes["default"])(path, '/video/') && _regexp.IS_VIDEO_ID.test(pathPart)) {
    return true;
  } // Not a candidate.


  return false;
}
/**
 * Tries to clean up the IDs.
 */


function cleanId(id) {
  // NRK-style ID: 1.14061418
  if ((0, _includes["default"])(id, '1.') && id.charAt(1) === '.') {
    return id;
  } // Svalbardposten-style ID: 19.9886


  if ((0, _includes["default"])(id, '19.') && id.charAt(2) === '.') {
    var splitId = id.split('.');
    return splitId[1];
  } // If the ID has a dot, pick the correct part of it.
  // It could also be a number (100.000), so make sure that the ID part has at
  // least length of five, otherwise don't consider it as an ID anymore.


  if ((0, _includes["default"])(id, '.')) {
    return id.split('.').reduce(function (currentId, candidate) {
      if (candidate.length >= 5) {
        return candidate;
      }

      return false;
    });
  } // Match the correct part of an ID candidate to clean it.


  var hashId = _regexp.IS_HASH_ID.exec(id);

  var numericId = _regexp.IS_NUMERIC_ID.exec(id);

  var numericIdWithTrailingChar = _regexp.IS_NUMERIC_TRAILING_CHAR_ID.exec(id);

  var numericIdWithLeadingChar = _regexp.IS_NUMERIC_LEADING_CHAR_ID.exec(id); // If hash ID, keep the entire thing.


  if (hashId && hashId.length !== 0) {
    return hashId[0];
  } // IDs with a single trailing char (12345b) are OK


  if (numericIdWithTrailingChar && numericIdWithTrailingChar.length !== 0) {
    return numericIdWithTrailingChar[0];
  } // IDs with a single leading char (b12345) are OK


  if (numericIdWithLeadingChar && numericIdWithLeadingChar.length !== 0 && id.length === numericIdWithLeadingChar[0].length) {
    return numericIdWithLeadingChar[0];
  } // Numeric IDs are OK


  if (numericId && numericId.length !== 0) {
    return numericId[0];
  } // The ID is already fine.


  return id;
}
/**
 * Picks the best ID from an array of ID candidates.
 */


function pickId(candidates, path) {
  // Pick the first ID as the best candidate so far.
  var id = candidates.shift();
  candidates.forEach(function (candidate) {
    var numericId = _regexp.IS_NUMERIC_ID.exec(candidate); // Prefer numeric IDs


    if (numericId && numericId.length !== 0) {
      var _numericId = _slicedToArray(numericId, 1),
          potentialId = _numericId[0]; // But only if they are longer than the previously selected ID and does not look like a date


      if (id.length < potentialId.length) {
        id = potentialId;
      }
    }
  });
  return id;
}
/**
 * Handles combination IDs from sites that use ../<idIdentification>/<combination_id>/..-format
 *
 * Examples:
 * https://www.vg.no/sport/alpint/i/Xwe06W/jesper-saltvik-pedersen-tok-norges-foerste-gull => vg.no/Xwe06W
 * http://www.aftonbladet.se/sportbladet/hockey/a/xREzoR/rankning-25-basta-varvningarna-i-shl => aftonbladet.se/xREzoR
 * https://www.dagbladet.no/video/bmJszChBR5M => dagbladet.no/bmJszChBR5M
 */


function isCombinationId(pathPart, path, idIdentification, idLength) {
  if ((0, _includes["default"])(path, idIdentification)) {
    var position = path.indexOf(idIdentification);
    var sliceSize = position + idIdentification.length;
    var slicedId = path.slice(sliceSize, sliceSize + idLength);

    if ((0, _includes["default"])(slicedId, '-') || (0, _includes["default"])(slicedId, '_')) {
      return false;
    }

    if (slicedId === pathPart) {
      return true;
    } // In some cases, the ID is only 5 chars


    if (slicedId.slice(0, 5) === pathPart) {
      return true;
    }
  }

  return false;
}
/**
 * Check if the candidate is positioned in the path where it's likely to find an ID.
 */


function isInIdPosition(pathPart, path) {
  var numericId = _regexp.IS_NUMERIC_ID.exec(pathPart);

  var id = pathPart;

  if (numericId) {
    var _numericId2 = _slicedToArray(numericId, 1);

    id = _numericId2[0];
  }

  var startIndex = path.indexOf(id);
  var endIndex = startIndex + id.length;
  var charBefore = path.charAt(startIndex - 1);
  var charAfter = path.charAt(endIndex); // Surrounded by dashes, most likely the part of a title:
  // /music/2014/may/12/fan-led-aphex-twin-kickstarter-campaign-raises-67424-caustic-window

  if (charBefore === '-' && charAfter === '-') {
    return false;
  }

  return true;
}