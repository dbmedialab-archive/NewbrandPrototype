"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = getHashId;

var _regexp = require("./regexp");

var _includes = _interopRequireDefault(require("./includes"));

var _startsWith = _interopRequireDefault(require("./starts-with"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/**
 * Parses the query params to find the external article ID.
 */
function getHashId(host, hash) {
  // Only let through supported hash IDs
  if (!(0, _includes["default"])(hash, '/') && !(0, _startsWith["default"])(hash, '#event=')) {
    return false;
  } // Look for candidates


  var candidates = hash.split(_regexp.HASH_SPLIT).filter(findCandidates);
  var id; // Only one candidate, clean it.

  if (candidates.length === 1) {
    id = cleanId(candidates[0]);
  } // Multiple candidates, decide on one and clean it.


  if (candidates.length > 1) {
    var pickedId = pickId(candidates);
    id = cleanId(pickedId);
  } // Id found in hash, create ID from it.


  if (id) {
    return "".concat(host, "/").concat(id);
  } // No ID found in hash


  return false;
}
/**
 * Check if every candidate looks like something that could be an ID.
 */


function findCandidates(part) {
  // Contains at least 5 numbers and possibly a dot.
  if (_regexp.IS_NUMERIC_ID.test(part)) {
    return true;
  }

  if (_regexp.IS_SHORT_HASH_ID.test(part)) {
    return true;
  }

  return false;
}
/**
 * Tries to clean up the IDs.
 */


function cleanId(id) {
  // Match the correct part of an ID candidate to clean it.
  var numericId = _regexp.IS_NUMERIC_ID.exec(id); // Plain numeric IDs are OK


  if (numericId && numericId.length !== 0) {
    return numericId[0];
  } // The ID is already fine.


  return id;
}
/**
 * Picks the best ID from an array of ID candidates.
 */


function pickId(candidates) {
  // Be stupid and only pick the first ID.
  return candidates.shift();
}