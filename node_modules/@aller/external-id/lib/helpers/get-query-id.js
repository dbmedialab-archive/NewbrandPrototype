"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = getQueryId;

var _regexp = require("./regexp");

var _includes = _interopRequireDefault(require("./includes"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

/**
 * Parses the query params to find the external article ID.
 */
function getQueryId(host, query) {
  // Look for candidates
  var candidates = Object.keys(query).filter(findCandidates);
  var id; // Only one candidate, clean it.

  if (candidates.length === 1) {
    id = cleanId(query[candidates[0]]);
  } // Id found in query params, create ID from it.


  if (id) {
    return "".concat(host, "/").concat(id);
  } // No ID found in query params


  return false;
}
/**
 * Check if every candidate looks like something that could be an ID.
 */


function findCandidates(key) {
  // We know this isn't a proper id
  if ((0, _includes["default"])(key, 'srwid') || (0, _includes["default"])(key, 'FylkeId') || (0, _includes["default"])(key, 'WT.mc_id')) {
    return false;
  } // If the key is something with ID, it probably is one.


  if (key === 'id' || (0, _includes["default"])(key, '_id') || (0, _includes["default"])(key, 'ID') || (0, _includes["default"])(key, 'Id')) {
    return true;
  } // If the key is something with artikkel, it probably is a ID.


  if ((0, _includes["default"])(key, 'artikkel')) {
    return true;
  }

  if (key === 'p' || key === 'playVideo') {
    return true;
  }

  return false;
}
/**
 * Tries to clean up the IDs.
 */


function cleanId(id) {
  // Match the correct part of an ID candidate to clean it.
  var numericId = _regexp.IS_NUMERIC_ID.exec(id);

  var videoId = _regexp.IS_VIDEO_ID.exec(id); // Plain numeric IDs are OK


  if (numericId && numericId.length !== 0) {
    return numericId[0];
  } // Video IDs are OK


  if (videoId && videoId.length !== 0) {
    return videoId[0];
  } // Cleans IDs from paths with broken queries: ?p=4216?xtor=RSS-2


  if ((0, _includes["default"])(id, '?')) {
    return id.split('?').filter(function (part) {
      return !isNaN(part);
    }) // eslint-disable-line no-restricted-globals
    .reduce(function (a, b) {
      return a.length > b.length;
    });
  } // The ID is already fine.


  return id;
}