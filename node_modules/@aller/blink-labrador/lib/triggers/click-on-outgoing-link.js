"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var add_listener_1 = require("../utils/add-listener");
var includes_1 = require("../utils/includes");
var debounce_1 = __importDefault(require("../utils/debounce"));
var CLICKABLE_TAG = 'data-click-id';
/**
 * @param node - DOM node
 * @returns If the DOM node is clickable or not
 */
function isClickable(node) {
    if (!node) {
        return false;
    }
    // Return true if it is an a-tag or has our custom clickable attribute
    return (node.tagName === 'A' ||
        !!(node.getAttribute && node.getAttribute(CLICKABLE_TAG)));
}
/**
 * @param node - DOM node
 * @param i - Number of iterations
 * @returns Clickable element if it exists
 */
function getClickableElement(node, i) {
    if (i === void 0) { i = 0; }
    if (!node || i >= 5) {
        return null;
    }
    return isClickable(node) ? node : getClickableElement(node.parentNode, ++i);
}
/**
 * Figure out if the click was on a link or element with data-click-id tag and send report if so.
 * @param {Object} e - Click event.
 */
function getClickableData(e) {
    var clickableElement = getClickableElement(e.target);
    if (clickableElement) {
        var href = clickableElement.getAttribute('href');
        var id = clickableElement.getAttribute(CLICKABLE_TAG);
        return {
            element: clickableElement,
            url: includes_1.stringIncludes(href, '/') && href,
            id: id,
        };
    }
    return { id: null, url: null, element: null };
}
/**
 * EventLisener that triggers on outbounding links.
 * @param {function} callback
 */
function addEventListenerOnOutgoingLink(callback) {
    var last = '';
    var resetUrl = debounce_1.default(function () {
        last = '';
    }, 2000);
    function sendEventIfLink(clickEvent) {
        // Track links that not neccessarily are links, but things we want to track
        var _a = getClickableData(clickEvent), element = _a.element, id = _a.id, url = _a.url;
        var strippedUrl = includes_1.stringIncludes(url, '#') ? url.split('#')[0] : url;
        var idOrUrl = id || strippedUrl;
        if (idOrUrl && idOrUrl !== last) {
            if (id) {
                last = id;
            }
            else if (strippedUrl) {
                last = strippedUrl;
            }
            callback({ clickEvent: clickEvent, element: element, id: id, url: url });
            resetUrl();
        }
    }
    add_listener_1.addListenerAggregated('contextmenu', sendEventIfLink);
    add_listener_1.addListenerAggregated('click', sendEventIfLink);
    add_listener_1.addListenerAggregated('mousedown', sendEventIfLink);
}
exports.default = addEventListenerOnOutgoingLink;
//# sourceMappingURL=click-on-outgoing-link.js.map