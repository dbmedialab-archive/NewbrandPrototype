"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var aller_in_view_1 = __importDefault(require("@soldotno/aller-in-view"));
var blink_1 = __importDefault(require("@aller/blink"));
var click_on_outgoing_link_1 = __importDefault(require("./triggers/click-on-outgoing-link"));
var load_1 = __importDefault(require("./triggers/load"));
var keydown_1 = __importDefault(require("./triggers/keydown"));
var mousemove_1 = __importDefault(require("./triggers/mousemove"));
var scroll_1 = __importDefault(require("./triggers/scroll"));
var get_full_url_1 = __importDefault(require("./utils/get-full-url"));
var get_site_1 = __importDefault(require("./utils/get-site"));
var get_xavier_id_1 = __importDefault(require("./utils/get-xavier-id"));
var get_ab_cookie_1 = __importDefault(require("./utils/get-ab-cookie"));
var get_commercial_segments_1 = __importDefault(require("./utils/get-commercial-segments"));
var get_referrer_1 = __importDefault(require("./utils/get-referrer"));
var get_page_type_1 = __importDefault(require("./utils/get-page-type"));
var get_db_pluss_data_1 = __importDefault(require("./utils/get-db-pluss-data"));
var performance_1 = __importDefault(require("./utils/performance"));
var prev_pageview_1 = require("./utils/prev-pageview");
var sender_1 = __importDefault(require("./sender/sender"));
var configure_sender_1 = require("./sender/configure-sender");
var get_sender_config_1 = __importDefault(require("./sender/get-sender-config"));
var article_preview_1 = __importDefault(require("./utils/article-preview"));
var uuid_1 = __importDefault(require("./utils/uuid"));
var subscribe_to_jw_1 = require("./utils/subscribe-to-jw");
var throttle_1 = __importDefault(require("./utils/throttle"));
var dom_element_context_1 = __importDefault(require("./utils/dom-element-context"));
var ga_tracker_1 = require("./utils/ga-tracker");
/**
 * Docs: https://www.iab.com/guidelines/state-of-viewability-transaction-2015/
 * @param {Object} element
 */
function getThreshold(element) {
    return element.offsetHeight * element.offsetWidth >= 242500 ? 0.3 : 0.5;
}
var LabradorTracker = /** @class */ (function () {
    function LabradorTracker() {
        var _this = this;
        this.trackAdLoad = function (input) {
            _this.blink.adLoad(input);
        };
        // Expose a pageInit function so we can reset pages on SPAs
        this.pageInit = function () {
            _this.blink.pageInit({
                url: window.location.href,
                site: get_site_1.default(window.location.hostname),
                userId: get_xavier_id_1.default(),
                abCookie: get_ab_cookie_1.default(),
                commercialSegments: get_commercial_segments_1.default(),
                referrer: get_referrer_1.default(),
                pageType: get_page_type_1.default(),
            });
        };
        this.trackVideos = function () {
            var videoNodes = document.querySelectorAll('[data-videoid]');
            var _loop_1 = function (i) {
                var videoId = videoNodes[i].dataset.videoid;
                var canBeSticky = videoNodes[i].dataset.sticky === 'true';
                var playerId = uuid_1.default(videoId);
                var player = getPlayer(videoId);
                if (player && player.getDuration() !== undefined) {
                    subscribe_to_jw_1.subscribeToJW(_this._trackVideoEvent, player, playerId, canBeSticky);
                    ga_tracker_1.GAsubscribeToJW(player);
                }
                else {
                    window.addEventListener("playerLoaded-" + videoId, function () {
                        player = getPlayer(videoId);
                        subscribe_to_jw_1.subscribeToJW(_this._trackVideoEvent, player, playerId, canBeSticky);
                        ga_tracker_1.GAsubscribeToJW(player);
                    });
                }
                // Listen for events coming in from iframes
                window.addEventListener('message', function (event) {
                    // Do not accept events from other domains
                    if (event.origin !== window.location.origin) {
                        return;
                    }
                    var data = event.data;
                    if (data && data.type && data.data && data.party === 'blink') {
                        _this._trackVideoEvent(data);
                    }
                }, false);
            };
            for (var i = 0; i < videoNodes.length; i++) {
                _loop_1(i);
            }
        };
        this.trackCustom = function (input) {
            _this.blink.custom(input);
        };
        this._trackVideoEvent = this._trackVideoEvent.bind(this);
        configure_sender_1.configureSender(get_sender_config_1.default());
        this.activeTimeTimerId = 0;
        this.pageView = uuid_1.default('pageView');
        this.blink = blink_1.default({
            send: function (events) { return sender_1.default.sendWhenBefitting(events); },
            sendDirect: function (events) { return sender_1.default.sendNowIfAllowed(events); },
            useDevTools: true,
        });
        this.inView = aller_in_view_1.default();
        this.inView.interval(200);
        this.inView.addEventOptions({
            passive: true,
        });
        // Handle unload, pagehide and visibilitychange
        var stopAndSendAllEvents = throttle_1.default(function () {
            _this.blink.pageActivityStop({ url: window.location.href });
            _this.blink.sendAllEvents();
        }, 500);
        window.addEventListener('beforeunload', stopAndSendAllEvents);
        window.addEventListener('pagehide', stopAndSendAllEvents);
        window.addEventListener('visibilitychange', stopAndSendAllEvents);
        // Initialize the page, and attach the previous pageView
        this.blink.pageInit({
            url: window.location.href,
            pageView: this.pageView,
            previousPageView: prev_pageview_1.getPageView(get_referrer_1.default()) || '',
            site: get_site_1.default(window.location.hostname),
            userId: get_xavier_id_1.default(),
            abCookie: get_ab_cookie_1.default(),
            commercialSegments: get_commercial_segments_1.default(),
            referrer: get_referrer_1.default(),
            pageType: get_page_type_1.default(),
        });
        /**
         * Checks if blink-sw.js is imported in service-worker.js. The result is assigned to a global variable.
         * This is required for the Safari pagehide workaround.
         * The service worker must include importScripts('/blink-sw.js').
         */
        if ('serviceWorker' in navigator && window.fetch) {
            fetch('/service-worker.js')
                .then(function (data) { return data.text(); })
                .then(function (data) {
                window.blinkSwExists = /importScripts\('\/blink-sw\.js'\)/.test(data);
            });
        }
    }
    LabradorTracker.prototype.trackPageload = function () {
        this.blink.pageLoad({
            url: window.location.href,
            clientHeight: document.documentElement.clientHeight,
            clientWidth: document.documentElement.clientWidth,
            scrollHeight: document.documentElement.scrollHeight,
            plussData: get_db_pluss_data_1.default(),
        });
    };
    LabradorTracker.prototype.trackPerformance = function () {
        var _this = this;
        load_1.default(function () {
            var intervalId;
            var performance = new performance_1.default();
            if (!performance.performanceAPISupported) {
                _this.blink.performance({ performanceTimings: performance.initialPerformanceTimingsData });
                return;
            }
            intervalId = window.setInterval(function () {
                var performanceTimings = performance.getTimings();
                var allDataCollected = performance.hasAllDataCollected(performanceTimings);
                if (allDataCollected) {
                    clearInterval(intervalId);
                    _this.blink.performance({ performanceTimings: performanceTimings });
                }
            }, 400);
        });
    };
    /**
     * Track a specify element, logs to GAP, uses the standard ads rules to see if it is inscreen.
     * The reason we just can track on the selector is because each might have a different threshold
     * @param {domNode} element the element to track
     */
    LabradorTracker.prototype.trackAdInscreen = function (selector) {
        var _this = this;
        document.querySelectorAll(selector).forEach(function (element) {
            if (element.id !== undefined && element.id !== '') {
                _this.inView("#" + element.id, {
                    threshold: getThreshold(element),
                })
                    .on('enter', function () {
                    _this.blink.adScreenEnter({ id: element.id });
                })
                    .on('exit', function () {
                    _this.blink.adScreenExit({ id: element.id });
                });
            }
        });
    };
    /**
     * Track elements based on a selector, logs to GAP,
     * from first pixel the element is in the viewport
     * @param {string} selector a valid selector that captures all elements you want to track - https://www.w3.org/TR/css3-selectors/
     */
    LabradorTracker.prototype.trackAdInscreen0 = function (selector) {
        var _this = this;
        this.inView(selector)
            .on('enter', function (domElement) {
            _this.blink.adScreenEnter0({ id: domElement.getAttribute('id') || '' });
        })
            .on('exit', function (domElement) {
            _this.blink.adScreenExit0({ id: domElement.getAttribute('id') || '' });
        });
    };
    LabradorTracker.prototype.trackAdDFP = function () {
        var _this = this;
        window.googletag = window.googletag || {};
        window.googletag.cmd = window.googletag.cmd || [];
        window.googletag.cmd.push(function () {
            window.googletag
                .pubads()
                .addEventListener('impressionViewable', function (event) {
                var elementId = event.slot.getSlotElementId();
                _this.blink.dfpImpressionViewable({
                    id: elementId,
                    scrollTop: document.documentElement.scrollTop,
                });
            });
            window.googletag
                .pubads()
                .addEventListener('slotRenderEnded', function (event) {
                var elementId = event.slot.getSlotElementId();
                _this.blink.dfpSlotRenderEnded({
                    adUnitPath: event.slot.getAdUnitPath(),
                    advertiserId: event.advertiserId,
                    campaignId: event.campaignId,
                    creativeId: event.creativeId,
                    id: elementId,
                    lineItemId: event.lineItemId,
                    size: event.size,
                    sourceAgnosticCreativeId: event.sourceAgnosticCreativeId,
                    sourceAgnosticLineItemId: event.sourceAgnosticLineItemId,
                    bidder: event.slot.getTargeting('hb_bidder').join(','),
                    prebidWinningBid: event.slot.getTargeting('hb_pb').join(','),
                    scrollTop: document.documentElement.scrollTop,
                });
            });
            window.googletag
                .pubads()
                .addEventListener('slotOnload', function (event) {
                var elementId = event.slot.getSlotElementId();
                var name = event.slot.getTargeting('pos')[0];
                _this.blink.dfpSlotOnload({
                    id: elementId,
                    name: name,
                    scrollTop: document.documentElement.scrollTop,
                });
            });
        });
    };
    LabradorTracker.prototype.trackLinkClicks = function () {
        var _this = this;
        click_on_outgoing_link_1.default(function (_a) {
            var id = _a.id, url = _a.url, element = _a.element;
            var domContext = dom_element_context_1.default(element);
            var fullUrl = get_full_url_1.default(url || '', window.location);
            _this.blink.click({ id: id, url: fullUrl, context: domContext });
        });
    };
    LabradorTracker.prototype._trackVideoEvent = function (ev) {
        switch (ev.type) {
            case 'playerHidden':
                this.blink.playerHidden(ev.data);
                return;
            case 'playerShown':
                this.blink.playerShown(ev.data);
                return;
            case 'playerSticky':
                this.blink.playerSticky(ev.data);
                return;
            case 'videoAd':
                this.blink.videoAd(ev.data);
                return;
            case 'videoLoad':
                this.blink.videoLoad(ev.data);
                return;
            case 'videoPlay':
                this.blink.videoPlay(ev.data);
                return;
            case 'videoStop':
                this.blink.videoStop(ev.data);
                return;
            default:
                return;
        }
    };
    LabradorTracker.prototype._resetActiveTimer = function (url) {
        var _this = this;
        clearTimeout(this.activeTimeTimerId);
        this.activeTimeTimerId = window.setTimeout(function () { return _this.blink.pageActivityStop({ url: url }); }, 10000);
    };
    LabradorTracker.prototype.trackActiveTime = function () {
        var _this = this;
        var url = window.location.href;
        this._resetActiveTimer(url);
        var throttledStart = throttle_1.default(function () {
            _this._resetActiveTimer(url);
            _this.blink.pageActivityStart({
                url: url,
                pageScrollOffsetY: window.pageYOffset,
            });
            // Store the current pageView so we can pick it up on following pages
            prev_pageview_1.setPageView(window.location.href, _this.pageView);
        }, 2000);
        keydown_1.default(throttledStart);
        scroll_1.default(throttledStart);
        mousemove_1.default(throttledStart);
    };
    LabradorTracker.prototype.trackArticleImpressions = function (selector) {
        var _this = this;
        this.inView(selector).handlers.enter = [];
        this.inView(selector).handlers.exit = [];
        this.inView(selector, { threshold: 0.5 }).on('enter', function (domElement) {
            var preview = new article_preview_1.default(domElement, window.location);
            _this.blink.articlePreviewScreenEnter({
                context: dom_element_context_1.default(domElement),
                url: preview.url,
                title: preview.title || '',
                personalizationSystemUsed: preview.personalizationSystemUsed || '',
                personalizationParametersRequested: preview.personalizationParametersRequested || '',
            });
        });
    };
    LabradorTracker.prototype.trackBoxes = function (selector) {
        var _this = this;
        this.inView(selector, { threshold: 0.5 }).on('enter', function (domElement) {
            var id = domElement.getAttribute('id');
            if (id) {
                _this.blink.boxScreenEnter({
                    id: id,
                });
            }
        });
    };
    return LabradorTracker;
}());
exports.default = LabradorTracker;
function getPlayer(id) {
    var jwplayer = window['jwplayer'];
    return jwplayer && jwplayer(id);
}
//# sourceMappingURL=main.js.map