"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var store_1 = __importDefault(require("../store"));
describe('Store', function () {
    describe('add', function () {
        it('should add one element with id', function () {
            var store = new store_1.default(function (el) { return el.id; });
            store.add([{ id: '123', data: 'info' }]);
            expect(store.events).toEqual([{ id: '123', data: 'info' }]);
        });
        it('should not add if no id is given', function () {
            var store = new store_1.default(function (el) { return el.id; });
            store.add([{ data: 'info' }]);
            expect(store.events).toEqual([]);
        });
        it('should add every entry in a list if no duplicates', function () {
            var store = new store_1.default(function (el) { return el.id; });
            store.add([{ id: '1', data: 'info' }, { id: '2', data: 'other info' }]);
            expect(store.events).toEqual([
                { id: '1', data: 'info' },
                { id: '2', data: 'other info' },
            ]);
        });
        it('should add every entry in a list and overwrite duplicates', function () {
            var store = new store_1.default(function (el) { return el.id; });
            store.add([
                { id: '1', data: 'info' },
                { id: '2', data: 'other info' },
                { id: '1', data: 'new info' },
            ]);
            expect(store.events).toEqual([
                { id: '1', data: 'new info' },
                { id: '2', data: 'other info' },
            ]);
        });
    });
    describe('flush', function () {
        it('should not contain anything after calling flush with zero elements', function () {
            var store = new store_1.default(function (el) { return el.id; });
            store.flush();
            expect(store.events).toEqual([]);
        });
        it('should not contain anything after calling flush with one element', function () {
            var store = new store_1.default(function (el) { return el.id; });
            store.add([{ id: '123', data: 'info' }]);
            store.flush();
            expect(store.events).toEqual([]);
        });
        it('should not contain anything after calling flush with one element', function () {
            var store = new store_1.default(function (el) { return el.id; });
            store.add([{ id: '123', data: 'info' }, { id: '456' }]);
            store.flush();
            expect(store.events).toEqual([]);
        });
    });
});
//# sourceMappingURL=store.test.js.map