"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var store_1 = __importDefault(require("./store"));
var Sender = /** @class */ (function () {
    function Sender(_a) {
        var pendingEvents = _a.pendingEvents, sentEvents = _a.sentEvents, send = _a.send, checkConsent = _a.checkConsent;
        this.send = send;
        this.pendingStore = new store_1.default(function (ev) { return ev.id + "-" + ev.type + "-" + ev.pageView; });
        this.pendingStore.add(pendingEvents);
        this.sentStore = new store_1.default(function (ev) { return ev.id + "-" + ev.type + "-" + ev.pageView; });
        this.sentStore.add(sentEvents);
        this.checkConsent = checkConsent;
    }
    Sender.prototype.configureSend = function (send, checkConsent) {
        this.send = send;
        this.checkConsent = checkConsent;
    };
    Object.defineProperty(Sender.prototype, "pendingEvents", {
        get: function () {
            return this.pendingStore.events;
        },
        enumerable: true,
        configurable: true
    });
    Object.defineProperty(Sender.prototype, "sentEvents", {
        get: function () {
            return this.sentStore.events;
        },
        enumerable: true,
        configurable: true
    });
    Sender.prototype.sendNow = function (events) {
        if (events === void 0) { events = []; }
        // Send all events we got in, and add them to pendingStore
        if (events.length > 0) {
            this.sendWhenBefitting(events);
        }
        // Checck if we have something to send
        if (this.pendingEvents.length === 0) {
            return [];
        }
        // Send all events in the pendingStore (now including events),
        // and transfer them to sentStore
        var pending = this.pendingEvents.slice(0);
        this.sentStore.add(this.pendingEvents);
        this.pendingStore.flush();
        this.send(pending);
        return pending;
    };
    Sender.prototype.sendNowIfAllowed = function (events) {
        if (events === void 0) { events = []; }
        // Don't send if we have don't consent to send from the user
        if (!this.checkConsent()) {
            return [];
        }
        return this.sendNow(events);
    };
    Sender.prototype.sendWhenBefitting = function (events) {
        if (events === void 0) { events = []; }
        this.pendingStore.add(events);
    };
    return Sender;
}());
exports.TestableSender = Sender;
exports.default = new Sender({
    pendingEvents: [],
    sentEvents: [],
    send: function () { return null; },
    checkConsent: function () { return false; },
});
//# sourceMappingURL=sender.js.map