"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var sender_1 = __importDefault(require("./sender"));
// import { hasEveryConsent, hasAnsweredOil } from '../gdpr/consent';
var get_sender_config_1 = require("./get-sender-config");
var ga_tracker_1 = require("../utils/ga-tracker");
function configureSender(_a) {
    var sendInterval = _a.sendInterval, batchLimit = _a.batchLimit, batchInterval = _a.batchInterval, endpoints = _a.endpoints;
    function sendWithBeacon(events, sendUrl) {
        var data = JSON.stringify(events);
        // ia_document should be undefined unless this is
        // a FB Instant Article. If it is, we do not want
        // to use sendBeacon.
        if ('sendBeacon' in navigator &&
            typeof window !== 'undefined' &&
            typeof window['ia_document'] === 'undefined') {
            window.navigator.sendBeacon(sendUrl, data);
        }
        else {
            var req = new XMLHttpRequest();
            req.open('POST', sendUrl, true);
            req.setRequestHeader('Content-Type', 'application/json');
            req.send(data);
        }
    }
    function iterateEndpoints(events) {
        endpoints.forEach(function (endpoint) {
            if (endpoint.type === get_sender_config_1.EndpointType.URL) {
                sendWithBeacon(events, endpoint.value);
            }
            else if (endpoint.type === get_sender_config_1.EndpointType.GOOGLE_ANALYTICS) {
                ga_tracker_1.GATracker.log(events);
            }
        });
    }
    /*const checkConsent = () =>
      hasEveryConsent((window as any).AS_OIL) &&
      hasAnsweredOil((window as any).AS_OIL);*/
    // Assume consent, as OIL is turned off
    var checkConsent = function () { return true; };
    sender_1.default.configureSend(iterateEndpoints, checkConsent);
    // Configure batching
    if (batchInterval) {
        setInterval(function () {
            if (sender_1.default.pendingEvents.length > batchLimit) {
                sender_1.default.sendNowIfAllowed();
            }
        }, batchInterval);
    }
    // Configure normal send interval
    setInterval(function () { return sender_1.default.sendNowIfAllowed(); }, sendInterval);
}
exports.configureSender = configureSender;
//# sourceMappingURL=configure-sender.js.map