export declare type JWPlayerEventName = 'ready' | 'playlistComplete' | 'play' | 'playlistItem' | 'pause' | 'complete' | 'nextClick' | 'viewable' | 'adImpression' | 'allerStickyInteraction' | 'exit';
export declare type JWPlayerSendType = 'videoLoad' | 'videoPlay' | 'videoStop' | 'videoAd' | 'playerSticky' | 'playerShown' | 'playerHidden';
export interface JWPlayer {
    getDuration: () => number;
    getPosition: () => number;
    getVolume: () => number;
    getWidth: () => number;
    getMute: () => boolean;
    getHeight: () => number;
    getViewable: () => boolean;
    getAdBlock: () => boolean;
    getPlaylistItem: () => {
        mediaid: string;
    };
    on: (eventName: JWPlayerEventName, cb: Function) => void;
}
export interface JWEventData {
    videoId?: string;
    playerId?: string;
    duration?: number;
    muted?: boolean;
    width?: number;
    height?: number;
    position?: number;
    viewable?: boolean;
    adblock?: boolean;
    canBeSticky?: boolean;
    reason?: string;
    volume?: number;
    adPosition?: string;
    system?: string;
    adId?: string;
    creativeId?: string;
    sticky?: boolean;
    closed?: boolean;
    title?: string;
    client?: string;
    isBumper?: boolean;
}
export interface JWEvent {
    party: 'blink';
    type: JWPlayerSendType;
    data: JWEventData;
}
export declare function subscribeToJW(send: (ev: JWEvent) => void, player: JWPlayer, playerId: string, canBeSticky?: boolean, time?: Date): void;
