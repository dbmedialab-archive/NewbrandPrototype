"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var typings_1 = require("./typings");
var Performance = /** @class */ (function () {
    function Performance(win) {
        var _this = this;
        this.hasAllDataCollected = function (performanceTimings) {
            return !!performanceTimings.loadEventEnd;
        };
        this.getTimings = function () {
            var performanceData = _this.initialPerformanceTimingsData;
            var navigationTiming = _this.getNavigationTiming();
            var deprecatedPerfomanceTiming = _this.getDeprecatedPerformanceTiming();
            if (navigationTiming) {
                performanceData = _this.fillInData(navigationTiming);
            }
            else if (deprecatedPerfomanceTiming) {
                var start = _this.win.performance.timeOrigin || deprecatedPerfomanceTiming.navigationStart || 0;
                performanceData = _this.fillInData(deprecatedPerfomanceTiming, start);
            }
            return performanceData;
        };
        this.fillInData = function (timingObject, start) {
            var keys = typings_1.typedKeys(_this.initialPerformanceTimingsData);
            var performanceData = _this.initialPerformanceTimingsData;
            for (var i = 0; i < keys.length; i++) {
                var key = keys[i];
                performanceData[key] = _this.getRelativeToStart(timingObject[key], start) || _this.initialPerformanceTimingsData[key];
            }
            return performanceData;
        };
        // Returns performance nav object from newest spec (Navigation timing level 2)
        this.getNavigationTiming = function () {
            if (_this.win.performance.getEntriesByType) {
                var navigation = _this.win.performance.getEntriesByType("navigation");
                if (navigation && navigation[0]) {
                    return navigation[0];
                }
            }
            return null;
        };
        // Returns deprecated performance timing object from old spec (Navigation timing level 1)
        // Used as a fallback
        this.getDeprecatedPerformanceTiming = function () {
            return _this.win.performance.timing;
        };
        this.getRelativeToStart = function (timestamp, start) {
            if (typeof start === 'undefined') {
                return Math.floor(timestamp);
            }
            if (timestamp !== 0 && start !== 0) {
                return Math.floor(timestamp - start);
            }
            return 0;
        };
        this.initialPerformanceTimingsData = {
            domContentLoadedEventEnd: 0,
            domContentLoadedEventStart: 0,
            domInteractive: 0,
            loadEventEnd: 0,
            loadEventStart: 0,
            responseEnd: 0,
            responseStart: 0,
        };
        this.win = win ? win : window; // this done for the testing purpose
    }
    Object.defineProperty(Performance.prototype, "performanceAPISupported", {
        get: function () {
            return !!this.win.performance;
        },
        enumerable: true,
        configurable: true
    });
    return Performance;
}());
exports.default = Performance;
//# sourceMappingURL=performance.js.map