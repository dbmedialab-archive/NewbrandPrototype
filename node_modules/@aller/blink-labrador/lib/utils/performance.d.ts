interface IPerformanceTimings {
    domContentLoadedEventEnd: number;
    domContentLoadedEventStart: number;
    domInteractive: number;
    loadEventEnd: number;
    loadEventStart: number;
    responseEnd: number;
    responseStart: number;
}
interface IWindowPerformance {
    performance: {
        timeOrigin?: number;
        timing?: PerformanceTiming;
        getEntriesByType?: (type: string) => PerformanceNavigationTiming[];
    };
}
declare class Performance {
    initialPerformanceTimingsData: IPerformanceTimings;
    win: IWindowPerformance;
    constructor(win?: IWindowPerformance);
    hasAllDataCollected: (performanceTimings: IPerformanceTimings) => boolean;
    getTimings: () => IPerformanceTimings;
    fillInData: (timingObject: PerformanceTiming | PerformanceNavigationTiming, start?: number | undefined) => IPerformanceTimings;
    getNavigationTiming: () => PerformanceNavigationTiming | null;
    getDeprecatedPerformanceTiming: () => PerformanceTiming | null;
    getRelativeToStart: (timestamp: number, start: number | undefined) => number;
    readonly performanceAPISupported: boolean;
}
export default Performance;
