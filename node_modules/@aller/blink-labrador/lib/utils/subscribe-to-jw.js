"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var beforeunload_1 = __importDefault(require("../triggers/beforeunload"));
function subscribeToJW(send, player, playerId, canBeSticky, time) {
    if (canBeSticky === void 0) { canBeSticky = false; }
    if (time === void 0) { time = new Date(); }
    if (!player) {
        return;
    }
    player.on('playlistItem', function (e) {
        send({
            party: 'blink',
            type: 'videoLoad',
            data: {
                playerId: playerId,
                videoId: player.getPlaylistItem().mediaid,
                duration: player.getDuration(),
                muted: player.getMute(),
                width: player.getWidth(),
                height: player.getHeight(),
                position: player.getPosition(),
                viewable: player.getViewable(),
                adblock: player.getAdBlock(),
                canBeSticky: canBeSticky,
            },
        });
    });
    player.on('play', function (event) {
        send({
            party: 'blink',
            type: 'videoPlay',
            data: {
                playerId: playerId,
                videoId: player.getPlaylistItem().mediaid,
                position: player.getPosition(),
                reason: event.playReason,
                volume: player.getVolume(),
                muted: player.getMute(),
            },
        });
    });
    var trackVideoStop = function (reason) {
        send({
            party: 'blink',
            type: 'videoStop',
            data: {
                playerId: playerId,
                videoId: player.getPlaylistItem().mediaid,
                position: player.getPosition(),
                reason: reason,
                volume: player.getVolume(),
                muted: player.getMute(),
            },
        });
    };
    player.on('pause', function () {
        trackVideoStop('pause');
    });
    player.on('complete', function () {
        trackVideoStop('complete');
    });
    // TODO: Pass proper stopReason
    player.on('nextClick', function () {
        trackVideoStop('exit');
    });
    beforeunload_1.default(function () {
        trackVideoStop('exit');
    });
    player.on('viewable', function (e) {
        var position = player.getPosition();
        var madeVisible = e.viewable === 1;
        if (position === 0 && !madeVisible) {
            // we don't need to send initial hidden event
            return;
        }
        var input = {
            playerId: playerId,
            position: position,
            time: time,
            reason: 'viewable',
            muted: player.getMute(),
            volume: player.getVolume(),
        };
        send({
            party: 'blink',
            type: madeVisible ? 'playerShown' : 'playerHidden',
            data: input,
        });
    });
    player.on('adImpression', function (adImpression) {
        var get = function (p, o) {
            return p.reduce(function (xs, x) { return (xs && xs[x] ? xs[x] : null); }, o);
        };
        var ad = get(['ima', 'ad', 'g'], adImpression);
        var adPodInfo = ad.adPodInfo ? ad.adPodInfo : {};
        send({
            party: 'blink',
            type: 'videoAd',
            data: {
                playerId: playerId,
                videoId: player.getPlaylistItem().mediaid,
                adPosition: adImpression.adposition || 'pre',
                system: adImpression.adsystem,
                title: adImpression.adtitle,
                client: adImpression.client,
                viewable: adImpression.viewable,
                adId: ad.adId,
                isBumper: adPodInfo.isBumper,
                creativeId: ad.creativeId,
                duration: ad.duration,
            },
        });
    });
    player.on('allerStickyInteraction', function (e) {
        send({
            party: 'blink',
            type: 'playerSticky',
            data: {
                playerId: playerId,
                videoId: player.getPlaylistItem().mediaid,
                sticky: e.sticky,
                closed: e.closed,
            },
        });
    });
}
exports.subscribeToJW = subscribeToJW;
//# sourceMappingURL=subscribe-to-jw.js.map