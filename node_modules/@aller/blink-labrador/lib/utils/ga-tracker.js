"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var GAEvents;
(function (GAEvents) {
    GAEvents["PLAY"] = "play";
    GAEvents["PAUSE"] = "pause";
    GAEvents["CONTINUE"] = "continue";
    GAEvents["STOP"] = "stop";
    GAEvents["AUTOPLAY"] = "autoplay";
    GAEvents["PREROLL_STARTED"] = "prerollStarted";
    GAEvents["REPLAY"] = "replay";
    GAEvents["MORE_THAN_15SEC"] = ">15sec";
})(GAEvents || (GAEvents = {})); // 15sec, replay, live vs clip
exports.GAEvents = GAEvents;
var interactedVideos = [];
var getInteractedVideo = function (id) {
    return (interactedVideos.find(function (p) { return p.id === id; }) || {
        id: 'not-found',
        watched: false,
        type: 'live',
    });
};
function saveInteractedVideo(id, duration) {
    interactedVideos.push({
        id: id,
        watched: false,
        type: duration === null ? 'live' : 'clip',
    });
}
var GATracker = /** @class */ (function () {
    function GATracker() {
    }
    GATracker.log = function (events) {
        events.forEach(function (e) { return GATracker.logSingle(e); });
    };
    GATracker.logSingle = function (event) {
        switch (event.type) {
            case 'videoWatch':
                if (event.videoPlayReason === 'interaction' &&
                    (event.videoPlayPosition || 0) > 0) {
                    GATracker.send(GAEvents.CONTINUE, 0, event);
                }
                switch (event.videoStopReason) {
                    case 'pause':
                        GATracker.send(GAEvents.PAUSE, 0, event);
                        break;
                    case 'complete':
                    case 'exit':
                        GATracker.send(GAEvents.STOP, 1, event);
                        break;
                }
                break;
            case 'videoAd':
                GATracker.send(GAEvents.PREROLL_STARTED, 1, event);
                break;
            default:
                // do nothing
                break;
        }
    };
    GATracker.logDirect = function (event, player) {
        var id = player.getPlaylistItem().mediaid;
        var position = player.getPosition();
        var duration = player.getDuration();
        var video = getInteractedVideo(id);
        var eventToSend = { id: id };
        switch (event.type) {
            // saving video when initializing it
            // later we need this data for
            // sending this info for GA (clip or live)
            // and determine if video is played or
            // replayed
            case 'playlistItem':
                if (!video) {
                    saveInteractedVideo(id, duration);
                }
                else {
                    video.watched = true;
                }
                break;
            case 'play':
                if (position !== 0)
                    return;
                switch (event.playReason) {
                    case 'interaction':
                    case 'related-interaction':
                        if (video.watched) {
                            GATracker.send(GAEvents.REPLAY, 1, eventToSend);
                        }
                        else {
                            GATracker.send(GAEvents.PLAY, 1, eventToSend);
                        }
                        break;
                    case 'autostart':
                    case 'related-auto':
                        GATracker.send(GAEvents.AUTOPLAY, 1, eventToSend);
                        break;
                }
                break;
        }
    };
    GATracker.send = function (eventAction, eventValue, event) {
        var id = event.id;
        var playlistItem = getInteractedVideo(id);
        if (window['dataLayer']) {
            window['dataLayer'].push({
                eventCategory: "video - " + playlistItem.type,
                eventAction: eventAction,
                eventLabel: id,
                eventValue: eventValue,
                event: 'videoInteraction',
            });
        }
        else {
            console.error("Google Analytics 'dataLayer' is undefined.");
        }
    };
    return GATracker;
}());
exports.GATracker = GATracker;
function GAsubscribeToJW(player) {
    if (!player) {
        return;
    }
    player.on('playlistItem', function (e) {
        GATracker.logDirect(e, player);
    });
    player.on('play', function (e) {
        GATracker.logDirect(e, player);
    });
}
exports.GAsubscribeToJW = GAsubscribeToJW;
//# sourceMappingURL=ga-tracker.js.map