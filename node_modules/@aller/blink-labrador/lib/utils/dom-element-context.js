"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Cache = (function () {
    var warehouse = {};
    var count = 1;
    return {
        set: function (dom, data) {
            if (!dom.__dataid) {
                dom.__dataid = 'context' + count++;
            }
            warehouse[dom.__dataid] = data;
        },
        get: function (dom) {
            return warehouse[dom.__dataid];
        },
    };
})();
function getInfo(domElement) {
    if (!domElement) {
        return {};
    }
    var cached = Cache.get(domElement);
    if (cached) {
        return cached;
    }
    // Get sibling number, starting on index 1
    var index = 1;
    var el = domElement;
    while ((el = el.previousElementSibling)) {
        index++;
    }
    var result = {
        tag: domElement.tagName.toLowerCase(),
        id: domElement.getAttribute('id') || '',
        class: Array.prototype.slice
            .call(domElement.classList)
            .sort()
            .join(','),
        dataId: domElement.getAttribute('data-id') || '',
        i: '' + index,
        n: domElement.parentElement
            ? domElement.parentElement.children.length + ''
            : '1',
    };
    Cache.set(domElement, result);
    return result;
}
function queryString(obj) {
    return Object.keys(obj)
        .map(function (key) { return (obj[key] ? key + "=" + obj[key] : null); })
        .filter(function (el) { return !!el; })
        .join('&');
}
function domContext(domElement) {
    var tags = [];
    var currElement = domElement;
    // We go maximum 10 levels deep, so things don't spin out of control.
    for (var i = 0; i < 10; i++) {
        tags.push(getInfo(currElement));
        if (!currElement.parentElement ||
            currElement.parentElement.tagName === 'BODY') {
            break;
        }
        currElement = currElement.parentElement;
    }
    return tags.map(queryString);
}
exports.default = domContext;
//# sourceMappingURL=dom-element-context.js.map