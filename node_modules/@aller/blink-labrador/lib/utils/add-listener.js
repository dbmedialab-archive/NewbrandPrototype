"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var throttle_1 = __importDefault(require("./throttle"));
var includes_1 = require("./includes");
/**
 * The callback for when an event occurs.
 * @callback listener
 */
/**
 * {object} one key for every eventType. the value is a array of cb to be run for that event
 */
var callbacksPrEventType = {};
/**
 * {list} the events that we have checked that should be attached to the window object
 */
var windowEvents = ['beforeunload', 'load', 'unload', 'pagehide'];
/**
 * Adds an event listener. Try to use addListenerAggreagted
 * when you do not need to remove the EventListener for
 * need to have a special throttling in place
 * @param {string} evt - Event to listen to.
 * @param {EventListener} cb - Callback
 * @param {number} thr - Event throttling in ms.
 * @return {addListener~throttledCallback} - The throttled callback function.
 * Needed for removing the listener.
 */
function addListener(evt, cb, thr) {
    if (thr === void 0) { thr = 100; }
    var throttledCallback = throttle_1.default(cb, thr);
    if (includes_1.arrayIncludes(windowEvents, evt)) {
        // Do not throttle window events (rarely needed)
        window.addEventListener(evt, cb, { passive: true });
    }
    else if (document.addEventListener) {
        document.addEventListener(evt, throttledCallback, { passive: true });
    }
    // Need the exact function if we want to remove the listener.
    return throttledCallback;
}
exports.default = addListener;
/**
 * If you know that you do not need to remove the EventListener, this is the Listener to use.
 * Could be refactored and return and id of some sort and then we could create an
 * removeListenerAggregated that removes it from the list,
 * but we do not have a use case for that yet.
 * @param {string} evt
 * @param {EventListener} cb
 */
function addListenerAggregated(evt, cb) {
    if (evt in callbacksPrEventType) {
        callbacksPrEventType[evt].push(cb);
    }
    else {
        callbacksPrEventType[evt] = [];
        callbacksPrEventType[evt].push(cb);
        var runCallbacks = function (event) {
            callbacksPrEventType[evt].forEach(function (eventL) {
                eventL(event);
            });
        };
        addListener(evt, runCallbacks);
    }
}
exports.addListenerAggregated = addListenerAggregated;
//# sourceMappingURL=add-listener.js.map