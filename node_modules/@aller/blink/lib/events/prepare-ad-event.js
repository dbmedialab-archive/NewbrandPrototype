"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var consts_1 = require("./consts");
var general_data_1 = __importDefault(require("../utils/general-data"));
var event_time_1 = require("../utils/event-time");
function prepareAdEvent(input) {
    var page = input.page, id = input.id;
    var inscreenTime = event_time_1.calculateEventTime({
        times: page.state.inscreen[id],
        screenEvents: page.state.screen.events,
        now: input.time,
    });
    var inscreenTime0 = event_time_1.calculateEventTime({
        times: page.state.inscreen0[id],
        screenEvents: page.state.screen.events,
        now: input.time,
    });
    var ad = page.state.ads[id] || {};
    return __assign({}, general_data_1.default(page.state), { id: id || 'N/A', adId: id || 'N/A', type: 'ads', inscreenTime: inscreenTime || 0, inscreenTime0: inscreenTime0 || 0, scroll: {
            pos: {
                adLoad: ad[consts_1.SCROLL_POS_AD_LOAD] || 0,
                inscreenDFP: ad[consts_1.SCROLL_POS_INSCREEN_DFP] || 0,
                slotRenderEnded: ad[consts_1.SCROLL_POS_SLOT_RENDER_ENDED] || 0,
                slotOnload: ad[consts_1.SCROLL_POS_SLOT_ONLOAD] || 0,
            },
            offsetTop: ad[consts_1.SCROLL_OFFSET_TOP] || 0,
            offsetHeight: ad[consts_1.SCROLL_OFFSET_HEIGHT] || 0,
        }, dfp: {
            inscreen: ad[consts_1.DFP_INSCREEN] || 0,
            name: ad[consts_1.DFP_NAME] || 'N/A',
            advertiserId: ad[consts_1.DFP_ADVERTISER_ID] || 0,
            campaignId: ad[consts_1.DFP_CAMPAIGN_ID] || 0,
            creativeId: ad[consts_1.DFP_CREATIVE_ID] || 0,
            adUnitPath: ad[consts_1.DFP_ADUNIT_PATH] || 'N/A',
            rendered: ad[consts_1.DFP_RENDERED] || 0,
            loaded: ad[consts_1.DFP_LOADED] || 0,
            lineItemId: ad[consts_1.DFP_LINE_ITEM_ID] || 0,
            size: ad[consts_1.DFP_SIZE] || [0],
            sourceAgnosticCreativeId: ad[consts_1.DFP_SOURCE_AGNOSTIC_CREATIVE_ID] || 0,
            sourceAgnosticLineItemId: ad[consts_1.DFP_SOURCE_AGNOSTIC_LINE_ITEM_ID] || 0,
            bidder: ad[consts_1.DFP_BIDDER] || null,
            prebidWinningBid: ad[consts_1.DFP_PREBID_WINNING_BID] || '',
        } });
}
exports.default = prepareAdEvent;
function getAllAdEventsPrepared(page, time) {
    if (!page || !page.state) {
        return [];
    }
    return Object.keys(page.state.ads).map(function (adId) {
        return prepareAdEvent({ id: adId, page: page, time: time });
    });
}
exports.getAllAdEventsPrepared = getAllAdEventsPrepared;
//# sourceMappingURL=prepare-ad-event.js.map