"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var general_data_1 = __importDefault(require("../utils/general-data"));
var event_time_1 = require("../utils/event-time");
/**
 * Prepares a active time data selecting the right
 * fields to send to the server
 */
function prepareActiveTimeForSending(_a) {
    var page = _a.page, id = _a.id, time = _a.time;
    var activeTime = page.state.activeTime[id];
    return __assign({}, general_data_1.default(page.state), { type: 'activeTime', id: id, article: { harvesterId: activeTime.id, url: activeTime.url }, activeTime: event_time_1.calculateEventTime({
            times: activeTime.activity,
            screenEvents: page.state.screen.events,
            now: time,
        }), pageScrollLatestOffsetY: page.state.general.pageScrollLatestOffsetY || 0, pageScrollMaxOffsetY: page.state.general.pageScrollMaxOffsetY || 0 });
}
exports.default = prepareActiveTimeForSending;
function getAllActiveTimeEventsPrepared(page, time) {
    if (!page || !page.state) {
        return [];
    }
    return Object.keys(page.state.activeTime).map(function (articleId) {
        return prepareActiveTimeForSending({ page: page, id: articleId, time: time });
    });
}
exports.getAllActiveTimeEventsPrepared = getAllActiveTimeEventsPrepared;
//# sourceMappingURL=prepare-active-time-event.js.map