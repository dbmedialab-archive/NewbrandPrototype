"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var actions_1 = require("../actions");
function player(state, action) {
    var _a, _b, _c;
    if (state === void 0) { state = {}; }
    switch (action.type) {
        case actions_1.PLAYER_SHOWN:
            return __assign({}, state, (_a = {}, _a[action.payload.playerId] = (state[action.payload.playerId] || []).concat([
                {
                    type: 'shown',
                    reason: action.payload.reason,
                    time: action.payload.time || new Date(),
                    muted: action.payload.muted,
                    position: action.payload.position,
                    volume: action.payload.volume,
                },
            ]), _a));
        case actions_1.PLAYER_HIDDEN:
            return __assign({}, state, (_b = {}, _b[action.payload.playerId] = (state[action.payload.playerId] || []).concat([
                {
                    type: 'hidden',
                    reason: action.payload.reason,
                    time: action.payload.time || new Date(),
                    muted: action.payload.muted,
                    position: action.payload.position,
                    volume: action.payload.volume,
                },
            ]), _b));
        case actions_1.PLAYER_STICKY:
            return __assign({}, state, (_c = {}, _c[action.payload.playerId] = (state[action.payload.playerId] || []).concat([
                {
                    type: 'sticky',
                    time: action.payload.time || new Date(),
                    sticky: action.payload.sticky,
                    closed: action.payload.closed,
                },
            ]), _c));
        default:
            break;
    }
    return state;
}
exports.default = player;
//# sourceMappingURL=player.js.map