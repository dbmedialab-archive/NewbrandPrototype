"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var general_1 = __importDefault(require("../general"));
var actions_1 = require("../../actions");
var config_1 = require("../../config/config");
describe('general reducer', function () {
    describe('PAGE_INIT', function () {
        it('should set general values', function () {
            var action = {
                type: actions_1.PAGE_INIT,
                payload: {
                    url: 'http://www.dagbladet.no/',
                    pageType: 'fb instant article',
                    pageView: 'some-pageview-uuid',
                    previousPageView: 'prev-pageview-uuid',
                    referrer: 'sol.no',
                    userId: 'user3',
                    abCookie: 34,
                    commercialSegments: 'sport,soccer,gardening',
                    site: 'test-site',
                },
            };
            expect(general_1.default({}, action)).toEqual({
                pageType: 'fb instant article',
                pageView: 'some-pageview-uuid',
                previousPageView: 'prev-pageview-uuid',
                site: 'test-site',
                abCookie: 34,
                commercialSegments: 'sport,soccer,gardening',
                referrer: 'sol.no',
                userId: 'user3',
                url: 'http://www.dagbladet.no/',
                version: config_1.VERSION,
            });
        });
        it('should fallback to setting current pageView as previous', function () {
            var previousState = {
                pageView: 'first-pageview',
                previousPageView: undefined,
            };
            var action = {
                type: actions_1.PAGE_INIT,
                payload: {
                    url: 'http://www.dagbladet.no/',
                    pageType: '',
                    pageView: 'second-pageview',
                    referrer: 'sol.no',
                    userId: 'user3',
                    abCookie: 34,
                    commercialSegments: 'sport,soccer,gardening',
                    site: 'test-site',
                },
            };
            expect(general_1.default(previousState, action)).toEqual({
                pageType: '',
                pageView: 'second-pageview',
                previousPageView: 'first-pageview',
                site: 'test-site',
                abCookie: 34,
                commercialSegments: 'sport,soccer,gardening',
                referrer: 'sol.no',
                userId: 'user3',
                url: 'http://www.dagbladet.no/',
                version: config_1.VERSION,
            });
        });
    });
    describe('PAGE_LOAD', function () {
        it('should set plussData', function () {
            var action = {
                type: actions_1.PAGE_LOAD,
                payload: {
                    url: 'http://www.dagbladet.no/',
                    plussData: { hasAccess: true, customerNumber: '443' },
                },
            };
            expect(general_1.default({}, action)).toEqual({
                plussData: { hasAccess: true, customerNumber: '443' },
            });
        });
    });
    describe('ARTICLE_ACTIVITY_START', function () {
        it('should set pageScrollMaxOffsetY and pageScrollLatestOffsetY to zero for no payload', function () {
            var action = {
                type: actions_1.ARTICLE_ACTIVITY_START,
                payload: {},
            };
            expect(general_1.default({}, action)).toEqual({
                pageScrollMaxOffsetY: 0,
                pageScrollLatestOffsetY: 0,
            });
        });
        it('should set pageScrollMaxOffsetY and pageScrollLatestOffsetY when empty', function () {
            var action = {
                type: actions_1.ARTICLE_ACTIVITY_START,
                payload: {
                    pageScrollOffsetY: 900,
                },
            };
            expect(general_1.default({}, action)).toEqual({
                pageScrollMaxOffsetY: 900,
                pageScrollLatestOffsetY: 900,
            });
        });
        it('should set pageScrollMaxOffsetY and pageScrollLatestOffsetY in existing state, override max if larger', function () {
            var previousState = {
                pageView: 'pv',
                pageScrollMaxOffsetY: 300,
                pageScrollLatestOffsetY: 150,
            };
            var action = {
                type: actions_1.ARTICLE_ACTIVITY_START,
                payload: {
                    pageScrollOffsetY: 301,
                },
            };
            expect(general_1.default(previousState, action)).toEqual({
                pageView: 'pv',
                pageScrollMaxOffsetY: 301,
                pageScrollLatestOffsetY: 301,
            });
        });
        it('should set pageScrollMaxOffsetY and pageScrollLatestOffsetY in existing state, override max if larger', function () {
            var previousState = {
                pageView: 'pv',
                pageScrollMaxOffsetY: 500,
                pageScrollLatestOffsetY: 500,
            };
            var action = {
                type: actions_1.ARTICLE_ACTIVITY_START,
                payload: {
                    pageScrollOffsetY: 499,
                },
            };
            expect(general_1.default(previousState, action)).toEqual({
                pageView: 'pv',
                pageScrollMaxOffsetY: 500,
                pageScrollLatestOffsetY: 499,
            });
        });
    });
});
//# sourceMappingURL=general.test.js.map