"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
var config_1 = require("../config/config");
var uuid_1 = __importDefault(require("../utils/uuid"));
var actions_1 = require("../actions");
function general(state, action) {
    if (state === void 0) { state = {}; }
    switch (action.type) {
        case actions_1.PAGE_INIT: {
            return __assign({}, state, { abCookie: action.payload.abCookie, commercialSegments: action.payload.commercialSegments || '', pageType: action.payload.pageType || '', pageView: action.payload.pageView || uuid_1.default(), previousPageView: action.payload.previousPageView || state.pageView || undefined, referrer: action.payload.referrer || undefined, site: action.payload.site, url: action.payload.url, userId: action.payload.userId, version: config_1.VERSION });
        }
        case actions_1.PAGE_LOAD: {
            return __assign({}, state, { clientHeight: action.payload.clientHeight, clientWidth: action.payload.clientWidth, scrollHeight: action.payload.scrollHeight, plussData: action.payload.plussData });
        }
        case actions_1.ARTICLE_ACTIVITY_START: {
            return __assign({}, state, { pageScrollMaxOffsetY: Math.max(action.payload.pageScrollOffsetY || 0, state.pageScrollMaxOffsetY || 0), pageScrollLatestOffsetY: action.payload.pageScrollOffsetY || 0 });
        }
        default:
            break;
    }
    return state;
}
exports.default = general;
//# sourceMappingURL=general.js.map