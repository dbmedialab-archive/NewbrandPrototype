"use strict";
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
Object.defineProperty(exports, "__esModule", { value: true });
var consts_1 = require("../events/consts");
var actions_1 = require("../actions");
function singleAd(state, action) {
    var _a, _b, _c, _d;
    if (state === void 0) { state = {}; }
    switch (action.type) {
        case actions_1.AD_SCREEN_ENTER:
        case actions_1.AD_SCREEN_ENTER_0:
            return state;
        case actions_1.DFP_SLOT_RENDER_ENDED: {
            var _e = action.payload, adUnitPath = _e.adUnitPath, advertiserId = _e.advertiserId, bidder = _e.bidder, campaignId = _e.campaignId, creativeId = _e.creativeId, lineItemId = _e.lineItemId, prebidWinningBid = _e.prebidWinningBid, size = _e.size, sourceAgnosticCreativeId = _e.sourceAgnosticCreativeId, sourceAgnosticLineItemId = _e.sourceAgnosticLineItemId, scrollTop = _e.scrollTop;
            return __assign({}, state, (_a = {}, _a[consts_1.DFP_ADUNIT_PATH] = adUnitPath, _a[consts_1.DFP_ADVERTISER_ID] = advertiserId, _a[consts_1.DFP_BIDDER] = bidder, _a[consts_1.DFP_CAMPAIGN_ID] = campaignId, _a[consts_1.DFP_CREATIVE_ID] = creativeId, _a[consts_1.DFP_LINE_ITEM_ID] = lineItemId, _a[consts_1.DFP_PREBID_WINNING_BID] = prebidWinningBid, _a[consts_1.DFP_SIZE] = size, _a[consts_1.DFP_SOURCE_AGNOSTIC_CREATIVE_ID] = sourceAgnosticCreativeId, _a[consts_1.DFP_SOURCE_AGNOSTIC_LINE_ITEM_ID] = sourceAgnosticLineItemId, _a[consts_1.SCROLL_POS_SLOT_RENDER_ENDED] = scrollTop, _a[consts_1.DFP_RENDERED] = 1, _a));
        }
        case actions_1.DFP_SLOT_ON_LOAD: {
            return __assign({}, state, (_b = {}, _b[consts_1.SCROLL_POS_SLOT_ONLOAD] = action.payload.scrollTop, _b[consts_1.DFP_LOADED] = 1, _b[consts_1.DFP_NAME] = action.payload.name, _b));
        }
        case actions_1.DFP_IMPRESSION_VIEWABLE: {
            return __assign({}, state, (_c = {}, _c[consts_1.SCROLL_POS_INSCREEN_DFP] = action.payload.scrollTop, _c[consts_1.DFP_INSCREEN] = 1, _c));
        }
        case actions_1.AD_LOAD_START: {
            return __assign({}, state, (_d = {}, _d[consts_1.SCROLL_POS_AD_LOAD] = action.payload.scrollTop, _d[consts_1.SCROLL_OFFSET_TOP] = action.payload.offsetTop, _d[consts_1.SCROLL_OFFSET_HEIGHT] = action.payload.offsetHeight, _d));
        }
        default:
            break;
    }
    return state;
}
exports.singleAd = singleAd;
function ads(state, action) {
    var _a;
    if (state === void 0) { state = {}; }
    switch (action.type) {
        case actions_1.PAGE_INIT:
            return {}; // Flush the store on pageLoad
        case actions_1.DFP_SLOT_RENDER_ENDED:
        case actions_1.DFP_SLOT_ON_LOAD:
        case actions_1.DFP_IMPRESSION_VIEWABLE:
        case actions_1.AD_LOAD_START:
        case actions_1.AD_SCREEN_ENTER:
        case actions_1.AD_SCREEN_ENTER_0:
            return __assign({}, state, (_a = {}, _a[action.payload.id] = singleAd(state[action.payload.id], action), _a));
        default:
            break;
    }
    return state;
}
exports.default = ads;
//# sourceMappingURL=ads.js.map