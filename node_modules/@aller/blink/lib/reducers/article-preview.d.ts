export declare function singleArticlePreview(state: never[] | undefined, action: any): never[] | {
    id: any;
    context: any;
    url: any;
    title: any;
    height: any;
    width: any;
    personalizationParametersRequested: any;
    personalizationSystemUsed: any;
    position: any;
    length: number;
    toString(): string;
    toLocaleString(): string;
    pop(): undefined;
    push(...items: never[]): number;
    concat(...items: ConcatArray<never>[]): never[];
    concat(...items: ConcatArray<never>[]): never[];
    join(separator?: string | undefined): string;
    reverse(): never[];
    shift(): undefined;
    slice(start?: number | undefined, end?: number | undefined): never[];
    sort(compareFn?: ((a: never, b: never) => number) | undefined): never[];
    splice(start: number, deleteCount?: number | undefined): never[];
    splice(start: number, deleteCount: number, ...items: never[]): never[];
    unshift(...items: never[]): number;
    indexOf(searchElement: never, fromIndex?: number | undefined): number;
    lastIndexOf(searchElement: never, fromIndex?: number | undefined): number;
    every(callbackfn: (value: never, index: number, array: never[]) => unknown, thisArg?: any): boolean;
    some(callbackfn: (value: never, index: number, array: never[]) => unknown, thisArg?: any): boolean;
    forEach(callbackfn: (value: never, index: number, array: never[]) => void, thisArg?: any): void;
    map<U>(callbackfn: (value: never, index: number, array: never[]) => U, thisArg?: any): U[];
    filter<S extends never>(callbackfn: (value: never, index: number, array: never[]) => value is S, thisArg?: any): S[];
    filter(callbackfn: (value: never, index: number, array: never[]) => unknown, thisArg?: any): never[];
    reduce(callbackfn: (previousValue: never, currentValue: never, currentIndex: number, array: never[]) => never): never;
    reduce(callbackfn: (previousValue: never, currentValue: never, currentIndex: number, array: never[]) => never, initialValue: never): never;
    reduce<U>(callbackfn: (previousValue: U, currentValue: never, currentIndex: number, array: never[]) => U, initialValue: U): U;
    reduceRight(callbackfn: (previousValue: never, currentValue: never, currentIndex: number, array: never[]) => never): never;
    reduceRight(callbackfn: (previousValue: never, currentValue: never, currentIndex: number, array: never[]) => never, initialValue: never): never;
    reduceRight<U>(callbackfn: (previousValue: U, currentValue: never, currentIndex: number, array: never[]) => U, initialValue: U): U;
    find<S extends never>(predicate: (this: void, value: never, index: number, obj: never[]) => value is S, thisArg?: any): S | undefined;
    find(predicate: (value: never, index: number, obj: never[]) => unknown, thisArg?: any): undefined;
    findIndex(predicate: (value: never, index: number, obj: never[]) => unknown, thisArg?: any): number;
    fill(value: never, start?: number | undefined, end?: number | undefined): never[];
    copyWithin(target: number, start: number, end?: number | undefined): never[];
    [Symbol.iterator](): IterableIterator<never>;
    entries(): IterableIterator<[number, never]>;
    keys(): IterableIterator<number>;
    values(): IterableIterator<never>;
    [Symbol.unscopables](): {
        copyWithin: boolean;
        entries: boolean;
        fill: boolean;
        find: boolean;
        findIndex: boolean;
        keys: boolean;
        values: boolean;
    };
    includes(searchElement: never, fromIndex?: number | undefined): boolean;
} | {
    id: any;
    url: any;
    clicked: boolean;
    length: number;
    toString(): string;
    toLocaleString(): string;
    pop(): undefined;
    push(...items: never[]): number;
    concat(...items: ConcatArray<never>[]): never[];
    concat(...items: ConcatArray<never>[]): never[];
    join(separator?: string | undefined): string;
    reverse(): never[];
    shift(): undefined;
    slice(start?: number | undefined, end?: number | undefined): never[];
    sort(compareFn?: ((a: never, b: never) => number) | undefined): never[];
    splice(start: number, deleteCount?: number | undefined): never[];
    splice(start: number, deleteCount: number, ...items: never[]): never[];
    unshift(...items: never[]): number;
    indexOf(searchElement: never, fromIndex?: number | undefined): number;
    lastIndexOf(searchElement: never, fromIndex?: number | undefined): number;
    every(callbackfn: (value: never, index: number, array: never[]) => unknown, thisArg?: any): boolean;
    some(callbackfn: (value: never, index: number, array: never[]) => unknown, thisArg?: any): boolean;
    forEach(callbackfn: (value: never, index: number, array: never[]) => void, thisArg?: any): void;
    map<U>(callbackfn: (value: never, index: number, array: never[]) => U, thisArg?: any): U[];
    filter<S extends never>(callbackfn: (value: never, index: number, array: never[]) => value is S, thisArg?: any): S[];
    filter(callbackfn: (value: never, index: number, array: never[]) => unknown, thisArg?: any): never[];
    reduce(callbackfn: (previousValue: never, currentValue: never, currentIndex: number, array: never[]) => never): never;
    reduce(callbackfn: (previousValue: never, currentValue: never, currentIndex: number, array: never[]) => never, initialValue: never): never;
    reduce<U>(callbackfn: (previousValue: U, currentValue: never, currentIndex: number, array: never[]) => U, initialValue: U): U;
    reduceRight(callbackfn: (previousValue: never, currentValue: never, currentIndex: number, array: never[]) => never): never;
    reduceRight(callbackfn: (previousValue: never, currentValue: never, currentIndex: number, array: never[]) => never, initialValue: never): never;
    reduceRight<U>(callbackfn: (previousValue: U, currentValue: never, currentIndex: number, array: never[]) => U, initialValue: U): U;
    find<S extends never>(predicate: (this: void, value: never, index: number, obj: never[]) => value is S, thisArg?: any): S | undefined;
    find(predicate: (value: never, index: number, obj: never[]) => unknown, thisArg?: any): undefined;
    findIndex(predicate: (value: never, index: number, obj: never[]) => unknown, thisArg?: any): number;
    fill(value: never, start?: number | undefined, end?: number | undefined): never[];
    copyWithin(target: number, start: number, end?: number | undefined): never[];
    [Symbol.iterator](): IterableIterator<never>;
    entries(): IterableIterator<[number, never]>;
    keys(): IterableIterator<number>;
    values(): IterableIterator<never>;
    [Symbol.unscopables](): {
        copyWithin: boolean;
        entries: boolean;
        fill: boolean;
        find: boolean;
        findIndex: boolean;
        keys: boolean;
        values: boolean;
    };
    includes(searchElement: never, fromIndex?: number | undefined): boolean;
};
export default function articlePreview(state: {
    [key: string]: any;
} | undefined, action: any): {
    [key: string]: any;
};
