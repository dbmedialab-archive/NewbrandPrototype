import { getUniqueVideoIdsForPlayer } from '../player';
import { VideoTimeEvent } from '../video-event-time';

describe('getUniqueVideoIdsForPlayer', () => {
  it('should return unique ids from an array of events that includes duplicates', () => {
    const events: VideoTimeEvent[] = [
      {
        type: 'stop',
        reason: 'pause',
        time: new Date(),
        videoId: 'vid1',
        playerId: 'player1',
        muted: true,
        volume: 50,
        position: 10,
      },
      {
        type: 'stop',
        reason: 'pause',
        time: new Date(),
        videoId: 'vid2',
        playerId: 'player1',
        muted: true,
        volume: 50,
        position: 10,
      },
      {
        type: 'stop',
        reason: 'pause',
        time: new Date(),
        videoId: 'vid1',
        playerId: 'player1',
        muted: true,
        volume: 50,
        position: 10,
      },
      {
        type: 'stop',
        reason: 'pause',
        time: new Date(),
        videoId: 'vid3',
        playerId: 'player1',
        muted: true,
        volume: 50,
        position: 10,
      },
    ];
    const uniqueIds = getUniqueVideoIdsForPlayer(events, 'player1');
    const expected = ['vid1', 'vid2', 'vid3'];
    expect(uniqueIds).toEqual(expected);
  });

  it('should not include ids from events belonging to other playerIds', () => {
    const events: VideoTimeEvent[] = [
      {
        type: 'stop',
        reason: 'pause',
        time: new Date(),
        videoId: 'vid1',
        playerId: 'player1',
        muted: true,
        volume: 50,
        position: 10,
      },
      {
        type: 'stop',
        reason: 'pause',
        time: new Date(),
        videoId: 'vid2',
        playerId: 'player2',
        muted: true,
        volume: 50,
        position: 10,
      },
      {
        type: 'stop',
        reason: 'pause',
        time: new Date(),
        videoId: 'vid1',
        playerId: 'player1',
        muted: true,
        volume: 50,
        position: 10,
      },
      {
        type: 'stop',
        reason: 'pause',
        time: new Date(),
        videoId: 'vid3',
        playerId: 'player1',
        muted: true,
        volume: 50,
        position: 10,
      },
    ];
    const uniqueIds = getUniqueVideoIdsForPlayer(events, 'player1');
    const expected = ['vid1', 'vid3'];
    expect(uniqueIds).toEqual(expected);
  });
});
