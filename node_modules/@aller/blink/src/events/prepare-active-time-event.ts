import generalData from '../utils/general-data';
import { calculateEventTime } from '../utils/event-time';
import { BlinkEvent } from '../types';
import { Page } from '../selectors/get-page-state';

export interface PrepareActiveTimeProps {
  page: Page;
  id: string;
  time?: Date;
}

/**
 * Prepares a active time data selecting the right
 * fields to send to the server
 */
export default function prepareActiveTimeForSending({
  page,
  id,
  time,
}: PrepareActiveTimeProps): BlinkEvent {
  const activeTime = page.state.activeTime[id];
  return {
    ...generalData(page.state),
    type: 'activeTime',
    id,
    article: { harvesterId: activeTime.id, url: activeTime.url },
    activeTime: calculateEventTime({
      times: activeTime.activity,
      screenEvents: page.state.screen.events,
      now: time,
    }),
    pageScrollLatestOffsetY: page.state.general.pageScrollLatestOffsetY || 0,
    pageScrollMaxOffsetY: page.state.general.pageScrollMaxOffsetY || 0,
  };
}

export function getAllActiveTimeEventsPrepared(
  page: any,
  time: Date,
): BlinkEvent[] {
  if (!page || !page.state) {
    return [];
  }
  return Object.keys(page.state.activeTime).map(articleId =>
    prepareActiveTimeForSending({ page, id: articleId, time }),
  );
}
