import player, { PlayerState } from '../player';
import { PLAYER_HIDDEN, PLAYER_SHOWN } from '../../actions';

describe('Player reducer', () => {
  it('should add a new entry if playerId not in state', () => {
    const action = {
      type: PLAYER_SHOWN,
      payload: {
        playerId: '112',
        reason: 'viewable',
        time: new Date(0),
        muted: true,
        position: 50,
        volume: 50,
      },
    };

    const events: PlayerState = {
      '111': [
        {
          type: 'shown',
          reason: 'viewable',
          time: new Date(0),
          muted: true,
          position: 50,
          volume: 50,
        },
      ],
    };

    expect(player(events, action)).toEqual({
      '111': [
        {
          type: 'shown',
          reason: 'viewable',
          time: new Date(0),
          muted: true,
          position: 50,
          volume: 50,
        },
      ],
      '112': [
        {
          type: 'shown',
          reason: 'viewable',
          time: new Date(0),
          muted: true,
          position: 50,
          volume: 50,
        },
      ],
    });
  });

  it('should append to existing entry if playerId already in state', () => {
    const action = {
      type: PLAYER_SHOWN,
      payload: {
        playerId: '111',
        reason: 'viewable',
        time: new Date(0),
        muted: true,
        position: 50,
        volume: 50,
      },
    };

    const events: PlayerState = {
      '111': [
        {
          type: 'shown',
          reason: 'viewable',
          time: new Date(0),
          muted: true,
          position: 50,
          volume: 50,
        },
      ],
    };

    expect(player(events, action)).toEqual({
      '111': [
        {
          type: 'shown',
          reason: 'viewable',
          time: new Date(0),
          muted: true,
          position: 50,
          volume: 50,
        },
        {
          type: 'shown',
          reason: 'viewable',
          time: new Date(0),
          muted: true,
          position: 50,
          volume: 50,
        },
      ],
    });
  });

  describe('PLAYER_SHOWN', () => {
    it('should add a player shown event to existing state', () => {
      const action = {
        type: PLAYER_SHOWN,
        payload: {
          playerId: '111',
          reason: 'viewable',
          time: new Date(0),
          muted: true,
          position: 50,
          volume: 50,
        },
      };

      const expectedEvents: PlayerState = {
        '111': [
          {
            type: 'shown',
            reason: 'viewable',
            time: new Date(0),
            muted: true,
            position: 50,
            volume: 50,
          },
        ],
      };

      expect(player({}, action)).toEqual(expectedEvents);
    });
  });

  describe('PLAYER_HIDDEN', () => {
    it('should add a player hidden event to existing state', () => {
      const action = {
        type: PLAYER_HIDDEN,
        payload: {
          playerId: '111',
          reason: 'tabhide',
          time: new Date(1),
          muted: true,
          position: 50,
          volume: 50,
        },
      };

      const expectedEvents: PlayerState = {
        '111': [
          {
            time: new Date(1),
            reason: 'tabhide',
            type: 'hidden',
            muted: true,
            position: 50,
            volume: 50,
          },
        ],
      };

      expect(player({}, action)).toEqual(expectedEvents);
    });
  });
});
